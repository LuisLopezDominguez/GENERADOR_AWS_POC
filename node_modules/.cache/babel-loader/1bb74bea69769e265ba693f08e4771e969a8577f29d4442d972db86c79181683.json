{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SOAINT\\\\Desktop\\\\Generador-Contenido-AWS\\\\GENERADOR_AWS_POC\\\\src\\\\components\\\\GeneratedContent\\\\GeneratedContent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Button, Paper, TextField, Box, CircularProgress, Chip, Divider } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratedContent = ({\n  data,\n  onBack\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [copied, setCopied] = useState(false);\n  const [selectedNetwork, setSelectedNetwork] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [debug, setDebug] = useState(true);\n\n  // Redes sociales disponibles\n  const socialNetworks = [{\n    name: 'LinkedIn',\n    color: '#0077B5'\n  }, {\n    name: 'Facebook',\n    color: '#1877F2'\n  }, {\n    name: 'Twitter',\n    color: '#1DA1F2'\n  }, {\n    name: 'Instagram',\n    color: '#E1306C'\n  }];\n  useEffect(() => {\n    console.log(\"GeneratedContent recibi칩 datos:\", data);\n    if (data) {\n      // Iniciar un breve loading para simular procesamiento\n      setTimeout(() => {\n        try {\n          // ===== PROCESAMIENTO DE DATOS DE WEB SCRAPING =====\n          if (data.scraped_content && data.scraped_content.length > 0) {\n            console.log(\"Procesando datos de web scraping\");\n\n            // Generar t칤tulo\n            let generatedTitle = \"\";\n\n            // Intentar usar el t칤tulo del primer sitio\n            for (const page of data.scraped_content) {\n              if (page.title && page.title.trim()) {\n                generatedTitle = page.title;\n                break;\n              }\n            }\n            if (!generatedTitle) {\n              // T칤tulo por defecto seg칰n el tipo de contenido\n              generatedTitle = getTitleByContentType(data.contentType);\n            }\n\n            // Generar contenido\n            let generatedContent = \"\";\n            data.scraped_content.forEach((sitio, index) => {\n              // Usar el main_text si existe\n              if (sitio.main_text && sitio.main_text.trim()) {\n                const domain = extractDomain(sitio.url);\n                generatedContent += `游늯 De ${domain}:\\n\\n`;\n\n                // Extraer los primeros p치rrafos significativos\n                const parrafos = sitio.main_text.split('\\n').filter(p => p.trim().length > 30).slice(0, 3);\n                if (parrafos.length > 0) {\n                  generatedContent += parrafos.join('\\n\\n') + '\\n\\n';\n                }\n              }\n            });\n\n            // A침adir fuentes\n            generatedContent += \"\\nFuentes: \" + data.scraped_content.map(s => s.url || \"URL\").join(\", \");\n            setTitle(generatedTitle);\n            setContent(generatedContent);\n          }\n          // ===== PROCESAMIENTO DE DATOS DE OCR =====\n          else if (data.extracted_text) {\n            console.log(\"Procesando datos de OCR\");\n\n            // T칤tulo para OCR\n            const titleFromFile = data.source_file ? `Texto extra칤do de \"${data.source_file}\"` : getTitleByContentType(data.contentType);\n\n            // Formatear el texto extra칤do\n            let formattedText = data.extracted_text;\n\n            // Limpiar el texto extra칤do (eliminar l칤neas vac칤as consecutivas, etc.)\n            formattedText = formattedText.replace(/\\n{3,}/g, '\\n\\n') // Reemplazar 3 o m치s saltos por 2\n            .trim();\n\n            // A침adir contexto seg칰n el tipo de contenido\n            let finalContent = \"\";\n            switch (data.contentType) {\n              case 'ARTICULO':\n                finalContent = `A continuaci칩n se presenta un art칤culo basado en el texto extra칤do:\\n\\n${formattedText}`;\n                break;\n              case 'PUBLICACION':\n                finalContent = formattedText;\n                break;\n              default:\n                finalContent = formattedText;\n            }\n            setTitle(titleFromFile);\n            setContent(finalContent);\n          }\n          // ===== FALLBACK =====\n          else {\n            console.warn(\"No se encontr칩 un formato de datos reconocible\");\n            setTitle(getTitleByContentType(data.contentType));\n            setContent(\"No se pudo extraer contenido en un formato reconocible. Por favor, edita este texto manualmente.\");\n          }\n        } catch (error) {\n          console.error(\"Error al procesar datos:\", error);\n          setTitle(\"Error al procesar datos\");\n          setContent(\"Hubo un error al procesar el contenido extra칤do: \" + error.message);\n        } finally {\n          setIsLoading(false);\n        }\n      }, 1000);\n    } else {\n      console.warn(\"No se recibieron datos en GeneratedContent\");\n      setTitle(\"No hay datos disponibles\");\n      setContent(\"No se ha podido generar contenido porque no se recibieron datos.\");\n      setIsLoading(false);\n    }\n  }, [data]);\n\n  // Funci칩n para obtener un t칤tulo basado en el tipo de contenido\n  const getTitleByContentType = contentType => {\n    switch (contentType) {\n      case 'IMAGEN':\n        return \"Nueva imagen para tus redes sociales\";\n      case 'FLYER':\n        return \"Flyer promocional\";\n      case 'AUDIO':\n        return \"Nuevo audio para compartir\";\n      case 'ARTICULO':\n        return \"Art칤culo de inter칠s\";\n      default:\n        return \"Contenido para tu publicaci칩n\";\n    }\n  };\n\n  // Funci칩n para extraer el dominio de una URL\n  const extractDomain = url => {\n    try {\n      return new URL(url).hostname;\n    } catch (e) {\n      console.error(\"Error al parsear URL:\", e);\n      return url;\n    }\n  };\n  const handleCopy = () => {\n    const textToCopy = `${title}\\n\\n${content}`;\n    navigator.clipboard.writeText(textToCopy).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    });\n  };\n  const handleNetworkSelect = network => {\n    setSelectedNetwork(network);\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        padding: '2rem',\n        margin: '2rem',\n        width: '100%',\n        backgroundColor: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        minHeight: '300px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mt: 2\n        },\n        children: \"Generando tu contenido...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      padding: '2rem',\n      margin: '2rem',\n      width: '100%',\n      backgroundColor: '#fff'\n    },\n    children: [debug && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3,\n        p: 2,\n        bgcolor: '#f8f8f8',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: \"Informaci\\xF3n de Depuraci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: [\"Tipo de contenido: \", (data === null || data === void 0 ? void 0 : data.contentType) || \"No especificado\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: [\"Origen de los datos: \", data !== null && data !== void 0 && data.scraped_content ? \"Web Scraping\" : data !== null && data !== void 0 && data.extracted_text ? \"OCR\" : \"Desconocido\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }, this), (data === null || data === void 0 ? void 0 : data.source_file) && /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        children: [\"Archivo de origen: \", data.source_file]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Contenido Generado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        gutterBottom: true,\n        children: \"Selecciona una red social\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5rem'\n        },\n        children: socialNetworks.map(network => /*#__PURE__*/_jsxDEV(Button, {\n          variant: selectedNetwork === network.name ? \"contained\" : \"outlined\",\n          sx: {\n            backgroundColor: selectedNetwork === network.name ? network.color : 'transparent',\n            color: selectedNetwork === network.name ? '#fff' : network.color,\n            borderColor: network.color,\n            '&:hover': {\n              backgroundColor: network.color,\n              color: '#fff',\n              opacity: 0.9\n            }\n          },\n          onClick: () => handleNetworkSelect(network.name),\n          children: network.name\n        }, network.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      sx: {\n        my: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"T\\xEDtulo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Chip, {\n          label: \"Personaliza el t\\xEDtulo seg\\xFAn tus necesidades\",\n          variant: \"outlined\",\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"outlined\",\n        fullWidth: true,\n        value: title,\n        onChange: e => setTitle(e.target.value),\n        sx: {\n          backgroundColor: 'transparent'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Contenido de la publicaci\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          size: \"small\",\n          onClick: handleCopy,\n          color: copied ? \"success\" : \"primary\",\n          children: copied ? \"춰Copiado!\" : \"Copiar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"outlined\",\n        multiline: true,\n        rows: 8,\n        fullWidth: true,\n        value: content,\n        onChange: e => setContent(e.target.value),\n        sx: {\n          backgroundColor: 'transparent'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: onBack,\n        children: \"Volver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        sx: {\n          backgroundColor: '#ff9800',\n          color: '#fff',\n          '&:hover': {\n            backgroundColor: '#e65100'\n          }\n        },\n        children: \"Publicar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedContent, \"FOxRu1OqW4bRbgYGJoxAey1d1xg=\");\n_c = GeneratedContent;\nexport default GeneratedContent;\nvar _c;\n$RefreshReg$(_c, \"GeneratedContent\");","map":{"version":3,"names":["React","useState","useEffect","Typography","Button","Paper","TextField","Box","CircularProgress","Chip","Divider","jsxDEV","_jsxDEV","GeneratedContent","data","onBack","_s","title","setTitle","content","setContent","copied","setCopied","selectedNetwork","setSelectedNetwork","isLoading","setIsLoading","debug","setDebug","socialNetworks","name","color","console","log","setTimeout","scraped_content","length","generatedTitle","page","trim","getTitleByContentType","contentType","generatedContent","forEach","sitio","index","main_text","domain","extractDomain","url","parrafos","split","filter","p","slice","join","map","s","extracted_text","titleFromFile","source_file","formattedText","replace","finalContent","warn","error","message","URL","hostname","e","handleCopy","textToCopy","navigator","clipboard","writeText","then","handleNetworkSelect","network","elevation","sx","padding","margin","width","backgroundColor","display","flexDirection","alignItems","justifyContent","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","mt","mb","bgcolor","borderRadius","gutterBottom","flexWrap","gap","borderColor","opacity","onClick","my","label","size","fullWidth","value","onChange","target","multiline","rows","_c","$RefreshReg$"],"sources":["C:/Users/SOAINT/Desktop/Generador-Contenido-AWS/GENERADOR_AWS_POC/src/components/GeneratedContent/GeneratedContent.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Typography, Button, Paper, TextField, Box, CircularProgress, Chip, Divider } from '@mui/material';\r\n\r\nconst GeneratedContent = ({ data, onBack }) => {\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [copied, setCopied] = useState(false);\r\n    const [selectedNetwork, setSelectedNetwork] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [debug, setDebug] = useState(true);\r\n\r\n    // Redes sociales disponibles\r\n    const socialNetworks = [\r\n        { name: 'LinkedIn', color: '#0077B5' },\r\n        { name: 'Facebook', color: '#1877F2' },\r\n        { name: 'Twitter', color: '#1DA1F2' },\r\n        { name: 'Instagram', color: '#E1306C' }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        console.log(\"GeneratedContent recibi칩 datos:\", data);\r\n\r\n        if (data) {\r\n            // Iniciar un breve loading para simular procesamiento\r\n            setTimeout(() => {\r\n                try {\r\n                    // ===== PROCESAMIENTO DE DATOS DE WEB SCRAPING =====\r\n                    if (data.scraped_content && data.scraped_content.length > 0) {\r\n                        console.log(\"Procesando datos de web scraping\");\r\n\r\n                        // Generar t칤tulo\r\n                        let generatedTitle = \"\";\r\n\r\n                        // Intentar usar el t칤tulo del primer sitio\r\n                        for (const page of data.scraped_content) {\r\n                            if (page.title && page.title.trim()) {\r\n                                generatedTitle = page.title;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        if (!generatedTitle) {\r\n                            // T칤tulo por defecto seg칰n el tipo de contenido\r\n                            generatedTitle = getTitleByContentType(data.contentType);\r\n                        }\r\n\r\n                        // Generar contenido\r\n                        let generatedContent = \"\";\r\n\r\n                        data.scraped_content.forEach((sitio, index) => {\r\n                            // Usar el main_text si existe\r\n                            if (sitio.main_text && sitio.main_text.trim()) {\r\n                                const domain = extractDomain(sitio.url);\r\n                                generatedContent += `游늯 De ${domain}:\\n\\n`;\r\n\r\n                                // Extraer los primeros p치rrafos significativos\r\n                                const parrafos = sitio.main_text\r\n                                    .split('\\n')\r\n                                    .filter(p => p.trim().length > 30)\r\n                                    .slice(0, 3);\r\n\r\n                                if (parrafos.length > 0) {\r\n                                    generatedContent += parrafos.join('\\n\\n') + '\\n\\n';\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        // A침adir fuentes\r\n                        generatedContent += \"\\nFuentes: \" + data.scraped_content\r\n                            .map(s => s.url || \"URL\")\r\n                            .join(\", \");\r\n\r\n                        setTitle(generatedTitle);\r\n                        setContent(generatedContent);\r\n                    }\r\n                    // ===== PROCESAMIENTO DE DATOS DE OCR =====\r\n                    else if (data.extracted_text) {\r\n                        console.log(\"Procesando datos de OCR\");\r\n\r\n                        // T칤tulo para OCR\r\n                        const titleFromFile = data.source_file\r\n                            ? `Texto extra칤do de \"${data.source_file}\"`\r\n                            : getTitleByContentType(data.contentType);\r\n\r\n                        // Formatear el texto extra칤do\r\n                        let formattedText = data.extracted_text;\r\n\r\n                        // Limpiar el texto extra칤do (eliminar l칤neas vac칤as consecutivas, etc.)\r\n                        formattedText = formattedText\r\n                            .replace(/\\n{3,}/g, '\\n\\n') // Reemplazar 3 o m치s saltos por 2\r\n                            .trim();\r\n\r\n                        // A침adir contexto seg칰n el tipo de contenido\r\n                        let finalContent = \"\";\r\n\r\n                        switch (data.contentType) {\r\n                            case 'ARTICULO':\r\n                                finalContent = `A continuaci칩n se presenta un art칤culo basado en el texto extra칤do:\\n\\n${formattedText}`;\r\n                                break;\r\n                            case 'PUBLICACION':\r\n                                finalContent = formattedText;\r\n                                break;\r\n                            default:\r\n                                finalContent = formattedText;\r\n                        }\r\n\r\n                        setTitle(titleFromFile);\r\n                        setContent(finalContent);\r\n                    }\r\n                    // ===== FALLBACK =====\r\n                    else {\r\n                        console.warn(\"No se encontr칩 un formato de datos reconocible\");\r\n                        setTitle(getTitleByContentType(data.contentType));\r\n                        setContent(\"No se pudo extraer contenido en un formato reconocible. Por favor, edita este texto manualmente.\");\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error al procesar datos:\", error);\r\n                    setTitle(\"Error al procesar datos\");\r\n                    setContent(\"Hubo un error al procesar el contenido extra칤do: \" + error.message);\r\n                } finally {\r\n                    setIsLoading(false);\r\n                }\r\n            }, 1000);\r\n        } else {\r\n            console.warn(\"No se recibieron datos en GeneratedContent\");\r\n            setTitle(\"No hay datos disponibles\");\r\n            setContent(\"No se ha podido generar contenido porque no se recibieron datos.\");\r\n            setIsLoading(false);\r\n        }\r\n    }, [data]);\r\n\r\n    // Funci칩n para obtener un t칤tulo basado en el tipo de contenido\r\n    const getTitleByContentType = (contentType) => {\r\n        switch (contentType) {\r\n            case 'IMAGEN':\r\n                return \"Nueva imagen para tus redes sociales\";\r\n            case 'FLYER':\r\n                return \"Flyer promocional\";\r\n            case 'AUDIO':\r\n                return \"Nuevo audio para compartir\";\r\n            case 'ARTICULO':\r\n                return \"Art칤culo de inter칠s\";\r\n            default:\r\n                return \"Contenido para tu publicaci칩n\";\r\n        }\r\n    };\r\n\r\n    // Funci칩n para extraer el dominio de una URL\r\n    const extractDomain = (url) => {\r\n        try {\r\n            return new URL(url).hostname;\r\n        } catch (e) {\r\n            console.error(\"Error al parsear URL:\", e);\r\n            return url;\r\n        }\r\n    };\r\n\r\n    const handleCopy = () => {\r\n        const textToCopy = `${title}\\n\\n${content}`;\r\n        navigator.clipboard.writeText(textToCopy).then(() => {\r\n            setCopied(true);\r\n            setTimeout(() => setCopied(false), 2000);\r\n        });\r\n    };\r\n\r\n    const handleNetworkSelect = (network) => {\r\n        setSelectedNetwork(network);\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <Paper elevation={3} sx={{\r\n                padding: '2rem',\r\n                margin: '2rem',\r\n                width: '100%',\r\n                backgroundColor: '#fff',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '300px'\r\n            }}>\r\n                <CircularProgress color=\"primary\" />\r\n                <Typography variant=\"h6\" sx={{ mt: 2 }}>\r\n                    Generando tu contenido...\r\n                </Typography>\r\n            </Paper>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} sx={{\r\n            padding: '2rem',\r\n            margin: '2rem',\r\n            width: '100%',\r\n            backgroundColor: '#fff'\r\n        }}>\r\n            {debug && (\r\n                <Box sx={{ mb: 3, p: 2, bgcolor: '#f8f8f8', borderRadius: 1 }}>\r\n                    <Typography variant=\"subtitle2\" gutterBottom>\r\n                        Informaci칩n de Depuraci칩n\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        Tipo de contenido: {data?.contentType || \"No especificado\"}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        Origen de los datos: {data?.scraped_content ? \"Web Scraping\" : data?.extracted_text ? \"OCR\" : \"Desconocido\"}\r\n                    </Typography>\r\n                    {data?.source_file && (\r\n                        <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            Archivo de origen: {data.source_file}\r\n                        </Typography>\r\n                    )}\r\n                </Box>\r\n            )}\r\n\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Contenido Generado\r\n            </Typography>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                    Selecciona una red social\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>\r\n                    {socialNetworks.map((network) => (\r\n                        <Button\r\n                            key={network.name}\r\n                            variant={selectedNetwork === network.name ? \"contained\" : \"outlined\"}\r\n                            sx={{\r\n                                backgroundColor: selectedNetwork === network.name ? network.color : 'transparent',\r\n                                color: selectedNetwork === network.name ? '#fff' : network.color,\r\n                                borderColor: network.color,\r\n                                '&:hover': {\r\n                                    backgroundColor: network.color,\r\n                                    color: '#fff',\r\n                                    opacity: 0.9\r\n                                }\r\n                            }}\r\n                            onClick={() => handleNetworkSelect(network.name)}\r\n                        >\r\n                            {network.name}\r\n                        </Button>\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            <Divider sx={{ my: 2 }} />\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\r\n                    <Typography variant=\"h6\">\r\n                        T칤tulo\r\n                    </Typography>\r\n                    <Chip\r\n                        label=\"Personaliza el t칤tulo seg칰n tus necesidades\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                    />\r\n                </Box>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                    sx={{ backgroundColor: 'transparent' }}\r\n                />\r\n            </Box>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\r\n                    <Typography variant=\"h6\">\r\n                        Contenido de la publicaci칩n\r\n                    </Typography>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onClick={handleCopy}\r\n                        color={copied ? \"success\" : \"primary\"}\r\n                    >\r\n                        {copied ? \"춰Copiado!\" : \"Copiar\"}\r\n                    </Button>\r\n                </Box>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    multiline\r\n                    rows={8}\r\n                    fullWidth\r\n                    value={content}\r\n                    onChange={(e) => setContent(e.target.value)}\r\n                    sx={{ backgroundColor: 'transparent' }}\r\n                />\r\n            </Box>\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    onClick={onBack}\r\n                >\r\n                    Volver\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                        backgroundColor: '#ff9800',\r\n                        color: '#fff',\r\n                        '&:hover': { backgroundColor: '#e65100' }\r\n                    }}\r\n                >\r\n                    Publicar\r\n                </Button>\r\n            </Box>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default GeneratedContent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,GAAG,EAAEC,gBAAgB,EAAEC,IAAI,EAAEC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3G,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACoB,MAAM,EAAEC,SAAS,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACsB,eAAe,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAAC0B,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACA,MAAM4B,cAAc,GAAG,CACnB;IAAEC,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAU,CAAC,EACtC;IAAED,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAU,CAAC,EACtC;IAAED,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAU,CAAC,EACrC;IAAED,IAAI,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAU,CAAC,CAC1C;EAED7B,SAAS,CAAC,MAAM;IACZ8B,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEnB,IAAI,CAAC;IAEpD,IAAIA,IAAI,EAAE;MACN;MACAoB,UAAU,CAAC,MAAM;QACb,IAAI;UACA;UACA,IAAIpB,IAAI,CAACqB,eAAe,IAAIrB,IAAI,CAACqB,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;YACzDJ,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;;YAE/C;YACA,IAAII,cAAc,GAAG,EAAE;;YAEvB;YACA,KAAK,MAAMC,IAAI,IAAIxB,IAAI,CAACqB,eAAe,EAAE;cACrC,IAAIG,IAAI,CAACrB,KAAK,IAAIqB,IAAI,CAACrB,KAAK,CAACsB,IAAI,CAAC,CAAC,EAAE;gBACjCF,cAAc,GAAGC,IAAI,CAACrB,KAAK;gBAC3B;cACJ;YACJ;YAEA,IAAI,CAACoB,cAAc,EAAE;cACjB;cACAA,cAAc,GAAGG,qBAAqB,CAAC1B,IAAI,CAAC2B,WAAW,CAAC;YAC5D;;YAEA;YACA,IAAIC,gBAAgB,GAAG,EAAE;YAEzB5B,IAAI,CAACqB,eAAe,CAACQ,OAAO,CAAC,CAACC,KAAK,EAAEC,KAAK,KAAK;cAC3C;cACA,IAAID,KAAK,CAACE,SAAS,IAAIF,KAAK,CAACE,SAAS,CAACP,IAAI,CAAC,CAAC,EAAE;gBAC3C,MAAMQ,MAAM,GAAGC,aAAa,CAACJ,KAAK,CAACK,GAAG,CAAC;gBACvCP,gBAAgB,IAAI,SAASK,MAAM,OAAO;;gBAE1C;gBACA,MAAMG,QAAQ,GAAGN,KAAK,CAACE,SAAS,CAC3BK,KAAK,CAAC,IAAI,CAAC,CACXC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACd,IAAI,CAAC,CAAC,CAACH,MAAM,GAAG,EAAE,CAAC,CACjCkB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;gBAEhB,IAAIJ,QAAQ,CAACd,MAAM,GAAG,CAAC,EAAE;kBACrBM,gBAAgB,IAAIQ,QAAQ,CAACK,IAAI,CAAC,MAAM,CAAC,GAAG,MAAM;gBACtD;cACJ;YACJ,CAAC,CAAC;;YAEF;YACAb,gBAAgB,IAAI,aAAa,GAAG5B,IAAI,CAACqB,eAAe,CACnDqB,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACR,GAAG,IAAI,KAAK,CAAC,CACxBM,IAAI,CAAC,IAAI,CAAC;YAEfrC,QAAQ,CAACmB,cAAc,CAAC;YACxBjB,UAAU,CAACsB,gBAAgB,CAAC;UAChC;UACA;UAAA,KACK,IAAI5B,IAAI,CAAC4C,cAAc,EAAE;YAC1B1B,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;YAEtC;YACA,MAAM0B,aAAa,GAAG7C,IAAI,CAAC8C,WAAW,GAChC,sBAAsB9C,IAAI,CAAC8C,WAAW,GAAG,GACzCpB,qBAAqB,CAAC1B,IAAI,CAAC2B,WAAW,CAAC;;YAE7C;YACA,IAAIoB,aAAa,GAAG/C,IAAI,CAAC4C,cAAc;;YAEvC;YACAG,aAAa,GAAGA,aAAa,CACxBC,OAAO,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;YAAA,CAC3BvB,IAAI,CAAC,CAAC;;YAEX;YACA,IAAIwB,YAAY,GAAG,EAAE;YAErB,QAAQjD,IAAI,CAAC2B,WAAW;cACpB,KAAK,UAAU;gBACXsB,YAAY,GAAG,0EAA0EF,aAAa,EAAE;gBACxG;cACJ,KAAK,aAAa;gBACdE,YAAY,GAAGF,aAAa;gBAC5B;cACJ;gBACIE,YAAY,GAAGF,aAAa;YACpC;YAEA3C,QAAQ,CAACyC,aAAa,CAAC;YACvBvC,UAAU,CAAC2C,YAAY,CAAC;UAC5B;UACA;UAAA,KACK;YACD/B,OAAO,CAACgC,IAAI,CAAC,gDAAgD,CAAC;YAC9D9C,QAAQ,CAACsB,qBAAqB,CAAC1B,IAAI,CAAC2B,WAAW,CAAC,CAAC;YACjDrB,UAAU,CAAC,kGAAkG,CAAC;UAClH;QACJ,CAAC,CAAC,OAAO6C,KAAK,EAAE;UACZjC,OAAO,CAACiC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChD/C,QAAQ,CAAC,yBAAyB,CAAC;UACnCE,UAAU,CAAC,mDAAmD,GAAG6C,KAAK,CAACC,OAAO,CAAC;QACnF,CAAC,SAAS;UACNxC,YAAY,CAAC,KAAK,CAAC;QACvB;MACJ,CAAC,EAAE,IAAI,CAAC;IACZ,CAAC,MAAM;MACHM,OAAO,CAACgC,IAAI,CAAC,4CAA4C,CAAC;MAC1D9C,QAAQ,CAAC,0BAA0B,CAAC;MACpCE,UAAU,CAAC,kEAAkE,CAAC;MAC9EM,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC,EAAE,CAACZ,IAAI,CAAC,CAAC;;EAEV;EACA,MAAM0B,qBAAqB,GAAIC,WAAW,IAAK;IAC3C,QAAQA,WAAW;MACf,KAAK,QAAQ;QACT,OAAO,sCAAsC;MACjD,KAAK,OAAO;QACR,OAAO,mBAAmB;MAC9B,KAAK,OAAO;QACR,OAAO,4BAA4B;MACvC,KAAK,UAAU;QACX,OAAO,qBAAqB;MAChC;QACI,OAAO,+BAA+B;IAC9C;EACJ,CAAC;;EAED;EACA,MAAMO,aAAa,GAAIC,GAAG,IAAK;IAC3B,IAAI;MACA,OAAO,IAAIkB,GAAG,CAAClB,GAAG,CAAC,CAACmB,QAAQ;IAChC,CAAC,CAAC,OAAOC,CAAC,EAAE;MACRrC,OAAO,CAACiC,KAAK,CAAC,uBAAuB,EAAEI,CAAC,CAAC;MACzC,OAAOpB,GAAG;IACd;EACJ,CAAC;EAED,MAAMqB,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,UAAU,GAAG,GAAGtD,KAAK,OAAOE,OAAO,EAAE;IAC3CqD,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,UAAU,CAAC,CAACI,IAAI,CAAC,MAAM;MACjDrD,SAAS,CAAC,IAAI,CAAC;MACfY,UAAU,CAAC,MAAMZ,SAAS,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAC5C,CAAC,CAAC;EACN,CAAC;EAED,MAAMsD,mBAAmB,GAAIC,OAAO,IAAK;IACrCrD,kBAAkB,CAACqD,OAAO,CAAC;EAC/B,CAAC;EAED,IAAIpD,SAAS,EAAE;IACX,oBACIb,OAAA,CAACP,KAAK;MAACyE,SAAS,EAAE,CAAE;MAACC,EAAE,EAAE;QACrBC,OAAO,EAAE,MAAM;QACfC,MAAM,EAAE,MAAM;QACdC,KAAK,EAAE,MAAM;QACbC,eAAe,EAAE,MAAM;QACvBC,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,SAAS,EAAE;MACf,CAAE;MAAAC,QAAA,gBACE7E,OAAA,CAACJ,gBAAgB;QAACuB,KAAK,EAAC;MAAS;QAAA2D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpCjF,OAAA,CAACT,UAAU;QAAC2F,OAAO,EAAC,IAAI;QAACf,EAAE,EAAE;UAAEgB,EAAE,EAAE;QAAE,CAAE;QAAAN,QAAA,EAAC;MAExC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAEhB;EAEA,oBACIjF,OAAA,CAACP,KAAK;IAACyE,SAAS,EAAE,CAAE;IAACC,EAAE,EAAE;MACrBC,OAAO,EAAE,MAAM;MACfC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAE,MAAM;MACbC,eAAe,EAAE;IACrB,CAAE;IAAAM,QAAA,GACG9D,KAAK,iBACFf,OAAA,CAACL,GAAG;MAACwE,EAAE,EAAE;QAAEiB,EAAE,EAAE,CAAC;QAAE3C,CAAC,EAAE,CAAC;QAAE4C,OAAO,EAAE,SAAS;QAAEC,YAAY,EAAE;MAAE,CAAE;MAAAT,QAAA,gBAC1D7E,OAAA,CAACT,UAAU;QAAC2F,OAAO,EAAC,WAAW;QAACK,YAAY;QAAAV,QAAA,EAAC;MAE7C;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbjF,OAAA,CAACT,UAAU;QAAC2F,OAAO,EAAC,OAAO;QAAC/D,KAAK,EAAC,eAAe;QAAA0D,QAAA,GAAC,qBAC3B,EAAC,CAAA3E,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE2B,WAAW,KAAI,iBAAiB;MAAA;QAAAiD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC,eACbjF,OAAA,CAACT,UAAU;QAAC2F,OAAO,EAAC,OAAO;QAAC/D,KAAK,EAAC,eAAe;QAAA0D,QAAA,GAAC,uBACzB,EAAC3E,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEqB,eAAe,GAAG,cAAc,GAAGrB,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAE4C,cAAc,GAAG,KAAK,GAAG,aAAa;MAAA;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnG,CAAC,EACZ,CAAA/E,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE8C,WAAW,kBACdhD,OAAA,CAACT,UAAU;QAAC2F,OAAO,EAAC,OAAO;QAAC/D,KAAK,EAAC,eAAe;QAAA0D,QAAA,GAAC,qBAC3B,EAAC3E,IAAI,CAAC8C,WAAW;MAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CACf;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACR,eAEDjF,OAAA,CAACT,UAAU;MAAC2F,OAAO,EAAC,IAAI;MAACK,YAAY;MAAAV,QAAA,EAAC;IAEtC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEbjF,OAAA,CAACL,GAAG;MAACwE,EAAE,EAAE;QAAEiB,EAAE,EAAE;MAAE,CAAE;MAAAP,QAAA,gBACf7E,OAAA,CAACT,UAAU;QAAC2F,OAAO,EAAC,OAAO;QAACK,YAAY;QAAAV,QAAA,EAAC;MAEzC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbjF,OAAA,CAACL,GAAG;QAACwE,EAAE,EAAE;UAAEK,OAAO,EAAE,MAAM;UAAEgB,QAAQ,EAAE,MAAM;UAAEC,GAAG,EAAE;QAAS,CAAE;QAAAZ,QAAA,EACzD5D,cAAc,CAAC2B,GAAG,CAAEqB,OAAO,iBACxBjE,OAAA,CAACR,MAAM;UAEH0F,OAAO,EAAEvE,eAAe,KAAKsD,OAAO,CAAC/C,IAAI,GAAG,WAAW,GAAG,UAAW;UACrEiD,EAAE,EAAE;YACAI,eAAe,EAAE5D,eAAe,KAAKsD,OAAO,CAAC/C,IAAI,GAAG+C,OAAO,CAAC9C,KAAK,GAAG,aAAa;YACjFA,KAAK,EAAER,eAAe,KAAKsD,OAAO,CAAC/C,IAAI,GAAG,MAAM,GAAG+C,OAAO,CAAC9C,KAAK;YAChEuE,WAAW,EAAEzB,OAAO,CAAC9C,KAAK;YAC1B,SAAS,EAAE;cACPoD,eAAe,EAAEN,OAAO,CAAC9C,KAAK;cAC9BA,KAAK,EAAE,MAAM;cACbwE,OAAO,EAAE;YACb;UACJ,CAAE;UACFC,OAAO,EAAEA,CAAA,KAAM5B,mBAAmB,CAACC,OAAO,CAAC/C,IAAI,CAAE;UAAA2D,QAAA,EAEhDZ,OAAO,CAAC/C;QAAI,GAdR+C,OAAO,CAAC/C,IAAI;UAAA4D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAeb,CACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAENjF,OAAA,CAACF,OAAO;MAACqE,EAAE,EAAE;QAAE0B,EAAE,EAAE;MAAE;IAAE;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE1BjF,OAAA,CAACL,GAAG;MAACwE,EAAE,EAAE;QAAEiB,EAAE,EAAE;MAAE,CAAE;MAAAP,QAAA,gBACf7E,OAAA,CAACL,GAAG;QAACwE,EAAE,EAAE;UAAEK,OAAO,EAAE,MAAM;UAAEE,UAAU,EAAE,QAAQ;UAAEC,cAAc,EAAE,eAAe;UAAES,EAAE,EAAE;QAAE,CAAE;QAAAP,QAAA,gBACvF7E,OAAA,CAACT,UAAU;UAAC2F,OAAO,EAAC,IAAI;UAAAL,QAAA,EAAC;QAEzB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACbjF,OAAA,CAACH,IAAI;UACDiG,KAAK,EAAC,mDAA6C;UACnDZ,OAAO,EAAC,UAAU;UAClBa,IAAI,EAAC;QAAO;UAAAjB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACf,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNjF,OAAA,CAACN,SAAS;QACNwF,OAAO,EAAC,UAAU;QAClBc,SAAS;QACTC,KAAK,EAAE5F,KAAM;QACb6F,QAAQ,EAAGzC,CAAC,IAAKnD,QAAQ,CAACmD,CAAC,CAAC0C,MAAM,CAACF,KAAK,CAAE;QAC1C9B,EAAE,EAAE;UAAEI,eAAe,EAAE;QAAc;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENjF,OAAA,CAACL,GAAG;MAACwE,EAAE,EAAE;QAAEiB,EAAE,EAAE;MAAE,CAAE;MAAAP,QAAA,gBACf7E,OAAA,CAACL,GAAG;QAACwE,EAAE,EAAE;UAAEK,OAAO,EAAE,MAAM;UAAEE,UAAU,EAAE,QAAQ;UAAEC,cAAc,EAAE,eAAe;UAAES,EAAE,EAAE;QAAE,CAAE;QAAAP,QAAA,gBACvF7E,OAAA,CAACT,UAAU;UAAC2F,OAAO,EAAC,IAAI;UAAAL,QAAA,EAAC;QAEzB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACbjF,OAAA,CAACR,MAAM;UACH0F,OAAO,EAAC,UAAU;UAClBa,IAAI,EAAC,OAAO;UACZH,OAAO,EAAElC,UAAW;UACpBvC,KAAK,EAAEV,MAAM,GAAG,SAAS,GAAG,SAAU;UAAAoE,QAAA,EAErCpE,MAAM,GAAG,WAAW,GAAG;QAAQ;UAAAqE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACNjF,OAAA,CAACN,SAAS;QACNwF,OAAO,EAAC,UAAU;QAClBkB,SAAS;QACTC,IAAI,EAAE,CAAE;QACRL,SAAS;QACTC,KAAK,EAAE1F,OAAQ;QACf2F,QAAQ,EAAGzC,CAAC,IAAKjD,UAAU,CAACiD,CAAC,CAAC0C,MAAM,CAACF,KAAK,CAAE;QAC5C9B,EAAE,EAAE;UAAEI,eAAe,EAAE;QAAc;MAAE;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENjF,OAAA,CAACL,GAAG;MAACwE,EAAE,EAAE;QAAEK,OAAO,EAAE,MAAM;QAAEG,cAAc,EAAE,eAAe;QAAEQ,EAAE,EAAE;MAAE,CAAE;MAAAN,QAAA,gBACjE7E,OAAA,CAACR,MAAM;QACH0F,OAAO,EAAC,UAAU;QAClBU,OAAO,EAAEzF,MAAO;QAAA0E,QAAA,EACnB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTjF,OAAA,CAACR,MAAM;QACH0F,OAAO,EAAC,WAAW;QACnBf,EAAE,EAAE;UACAI,eAAe,EAAE,SAAS;UAC1BpD,KAAK,EAAE,MAAM;UACb,SAAS,EAAE;YAAEoD,eAAe,EAAE;UAAU;QAC5C,CAAE;QAAAM,QAAA,EACL;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEhB,CAAC;AAAC7E,EAAA,CAvTIH,gBAAgB;AAAAqG,EAAA,GAAhBrG,gBAAgB;AAyTtB,eAAeA,gBAAgB;AAAC,IAAAqG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}