{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SOAINT\\\\Desktop\\\\Generador-Contenido-AWS\\\\GENERADOR_AWS_POC\\\\src\\\\components\\\\GeneratedContent\\\\GeneratedContent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Typography, Button, Paper, TextField, Box, CircularProgress, Divider } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GeneratedContent = ({\n  data,\n  onBack\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [content, setContent] = useState('');\n  const [copied, setCopied] = useState(false);\n  const [selectedNetwork, setSelectedNetwork] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Redes sociales disponibles\n  const socialNetworks = [{\n    name: 'LinkedIn',\n    color: '#0077B5'\n  }, {\n    name: 'Facebook',\n    color: '#1877F2'\n  }, {\n    name: 'Twitter',\n    color: '#1DA1F2'\n  }, {\n    name: 'Instagram',\n    color: '#E1306C'\n  }];\n  useEffect(() => {\n    if (data) {\n      // Procesamiento breve para mostrar los datos\n      setTimeout(() => {\n        try {\n          // Procesar datos de Web Scraping\n          if (data.scraped_content && data.scraped_content.length > 0) {\n            // Usar el tÃ­tulo del primer sitio, si estÃ¡ disponible\n            let generatedTitle = \"\";\n            for (const page of data.scraped_content) {\n              if (page.title && page.title.trim()) {\n                generatedTitle = page.title;\n                break;\n              }\n            }\n\n            // Si no hay tÃ­tulo, usar uno predeterminado\n            if (!generatedTitle) {\n              generatedTitle = getTitleByContentType(data.contentType);\n            }\n\n            // Generar contenido combinado de los sitios\n            let generatedContent = \"\";\n            data.scraped_content.forEach(sitio => {\n              if (sitio.main_text && sitio.main_text.trim()) {\n                const domain = extractDomain(sitio.url);\n                generatedContent += `ðŸ“„ De ${domain}:\\n\\n`;\n                generatedContent += sitio.main_text.substring(0, 500) + \"...\\n\\n\";\n              }\n            });\n\n            // AÃ±adir fuentes\n            generatedContent += \"\\nFuentes: \" + data.scraped_content.map(s => s.url || \"URL\").join(\", \");\n            setTitle(generatedTitle);\n            setContent(generatedContent);\n          }\n          // Procesar datos de OCR\n          else if (data.extracted_text) {\n            // TÃ­tulo basado en el nombre del archivo\n            const fileTitle = data.source_file ? `Contenido extraÃ­do de \"${data.source_file}\"` : getTitleByContentType(data.contentType);\n\n            // Procesar el texto extraÃ­do\n            let formattedText = data.extracted_text;\n\n            // Adaptar el contenido segÃºn el tipo seleccionado\n            let finalContent = formattedText;\n\n            // Para artÃ­culos, aÃ±adir un poco de contexto\n            if (data.contentType === 'ARTICULO') {\n              finalContent = `A continuaciÃ³n se presenta un artÃ­culo basado en el texto extraÃ­do:\\n\\n${formattedText}`;\n            }\n            setTitle(fileTitle);\n            setContent(finalContent);\n          }\n          // Caso por defecto\n          else {\n            setTitle(getTitleByContentType(data.contentType));\n            setContent(\"No se pudo extraer contenido. Por favor, edita este texto manualmente.\");\n          }\n        } catch (error) {\n          console.error(\"Error al procesar datos:\", error);\n          setTitle(\"Error al procesar datos\");\n          setContent(\"Hubo un error al procesar el contenido extraÃ­do.\");\n        } finally {\n          setIsLoading(false);\n        }\n      }, 500);\n    } else {\n      setTitle(\"No hay datos disponibles\");\n      setContent(\"No se ha podido generar contenido porque no se recibieron datos.\");\n      setIsLoading(false);\n    }\n  }, [data]);\n\n  // FunciÃ³n para obtener un tÃ­tulo segÃºn el tipo de contenido\n  const getTitleByContentType = contentType => {\n    switch (contentType) {\n      case 'IMAGEN':\n        return \"Nueva imagen para redes sociales\";\n      case 'FLYER':\n        return \"Flyer promocional\";\n      case 'AUDIO':\n        return \"Audio para compartir\";\n      case 'ARTICULO':\n        return \"ArtÃ­culo de interÃ©s\";\n      default:\n        return \"Contenido para publicaciÃ³n\";\n    }\n  };\n\n  // FunciÃ³n para extraer el dominio de una URL\n  const extractDomain = url => {\n    try {\n      return new URL(url).hostname;\n    } catch (e) {\n      return url;\n    }\n  };\n  const handleCopy = () => {\n    const textToCopy = `${title}\\n\\n${content}`;\n    navigator.clipboard.writeText(textToCopy).then(() => {\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    });\n  };\n  const handleNetworkSelect = network => {\n    setSelectedNetwork(network);\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        padding: '2rem',\n        margin: '2rem',\n        width: '100%',\n        backgroundColor: '#fff',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        minHeight: '300px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        sx: {\n          mt: 2\n        },\n        children: \"Generando contenido...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      padding: '2rem',\n      margin: '2rem',\n      width: '100%',\n      backgroundColor: '#fff'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Contenido Generado\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        gutterBottom: true,\n        children: \"Selecciona una red social\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5rem'\n        },\n        children: socialNetworks.map(network => /*#__PURE__*/_jsxDEV(Button, {\n          variant: selectedNetwork === network.name ? \"contained\" : \"outlined\",\n          sx: {\n            backgroundColor: selectedNetwork === network.name ? network.color : 'transparent',\n            color: selectedNetwork === network.name ? '#fff' : network.color,\n            borderColor: network.color,\n            '&:hover': {\n              backgroundColor: network.color,\n              color: '#fff',\n              opacity: 0.9\n            }\n          },\n          onClick: () => handleNetworkSelect(network.name),\n          children: network.name\n        }, network.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {\n      sx: {\n        my: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: \"T\\xEDtulo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"outlined\",\n        fullWidth: true,\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          mb: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Contenido de la publicaci\\xF3n\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          size: \"small\",\n          onClick: handleCopy,\n          color: copied ? \"success\" : \"primary\",\n          children: copied ? \"Â¡Copiado!\" : \"Copiar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        variant: \"outlined\",\n        multiline: true,\n        rows: 8,\n        fullWidth: true,\n        value: content,\n        onChange: e => setContent(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        justifyContent: 'space-between',\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: onBack,\n        children: \"Volver\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        sx: {\n          backgroundColor: '#ff9800',\n          color: '#fff',\n          '&:hover': {\n            backgroundColor: '#e65100'\n          }\n        },\n        children: \"Publicar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 9\n  }, this);\n};\n_s(GeneratedContent, \"gNkVGpa8452QtQ//mN+TQnGUb1g=\");\n_c = GeneratedContent;\nexport default GeneratedContent;\nvar _c;\n$RefreshReg$(_c, \"GeneratedContent\");","map":{"version":3,"names":["React","useState","useEffect","Typography","Button","Paper","TextField","Box","CircularProgress","Divider","jsxDEV","_jsxDEV","GeneratedContent","data","onBack","_s","title","setTitle","content","setContent","copied","setCopied","selectedNetwork","setSelectedNetwork","isLoading","setIsLoading","socialNetworks","name","color","setTimeout","scraped_content","length","generatedTitle","page","trim","getTitleByContentType","contentType","generatedContent","forEach","sitio","main_text","domain","extractDomain","url","substring","map","s","join","extracted_text","fileTitle","source_file","formattedText","finalContent","error","console","URL","hostname","e","handleCopy","textToCopy","navigator","clipboard","writeText","then","handleNetworkSelect","network","elevation","sx","padding","margin","width","backgroundColor","display","flexDirection","alignItems","justifyContent","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","mt","gutterBottom","mb","flexWrap","gap","borderColor","opacity","onClick","my","fullWidth","value","onChange","target","size","multiline","rows","_c","$RefreshReg$"],"sources":["C:/Users/SOAINT/Desktop/Generador-Contenido-AWS/GENERADOR_AWS_POC/src/components/GeneratedContent/GeneratedContent.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Typography, Button, Paper, TextField, Box, CircularProgress, Divider } from '@mui/material';\r\n\r\nconst GeneratedContent = ({ data, onBack }) => {\r\n    const [title, setTitle] = useState('');\r\n    const [content, setContent] = useState('');\r\n    const [copied, setCopied] = useState(false);\r\n    const [selectedNetwork, setSelectedNetwork] = useState('');\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    // Redes sociales disponibles\r\n    const socialNetworks = [\r\n        { name: 'LinkedIn', color: '#0077B5' },\r\n        { name: 'Facebook', color: '#1877F2' },\r\n        { name: 'Twitter', color: '#1DA1F2' },\r\n        { name: 'Instagram', color: '#E1306C' }\r\n    ];\r\n\r\n    useEffect(() => {\r\n        if (data) {\r\n            // Procesamiento breve para mostrar los datos\r\n            setTimeout(() => {\r\n                try {\r\n                    // Procesar datos de Web Scraping\r\n                    if (data.scraped_content && data.scraped_content.length > 0) {\r\n                        // Usar el tÃ­tulo del primer sitio, si estÃ¡ disponible\r\n                        let generatedTitle = \"\";\r\n                        for (const page of data.scraped_content) {\r\n                            if (page.title && page.title.trim()) {\r\n                                generatedTitle = page.title;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                        // Si no hay tÃ­tulo, usar uno predeterminado\r\n                        if (!generatedTitle) {\r\n                            generatedTitle = getTitleByContentType(data.contentType);\r\n                        }\r\n\r\n                        // Generar contenido combinado de los sitios\r\n                        let generatedContent = \"\";\r\n                        data.scraped_content.forEach((sitio) => {\r\n                            if (sitio.main_text && sitio.main_text.trim()) {\r\n                                const domain = extractDomain(sitio.url);\r\n                                generatedContent += `ðŸ“„ De ${domain}:\\n\\n`;\r\n                                generatedContent += sitio.main_text.substring(0, 500) + \"...\\n\\n\";\r\n                            }\r\n                        });\r\n\r\n                        // AÃ±adir fuentes\r\n                        generatedContent += \"\\nFuentes: \" + data.scraped_content\r\n                            .map(s => s.url || \"URL\")\r\n                            .join(\", \");\r\n\r\n                        setTitle(generatedTitle);\r\n                        setContent(generatedContent);\r\n                    }\r\n                    // Procesar datos de OCR\r\n                    else if (data.extracted_text) {\r\n                        // TÃ­tulo basado en el nombre del archivo\r\n                        const fileTitle = data.source_file\r\n                            ? `Contenido extraÃ­do de \"${data.source_file}\"`\r\n                            : getTitleByContentType(data.contentType);\r\n\r\n                        // Procesar el texto extraÃ­do\r\n                        let formattedText = data.extracted_text;\r\n\r\n                        // Adaptar el contenido segÃºn el tipo seleccionado\r\n                        let finalContent = formattedText;\r\n\r\n                        // Para artÃ­culos, aÃ±adir un poco de contexto\r\n                        if (data.contentType === 'ARTICULO') {\r\n                            finalContent = `A continuaciÃ³n se presenta un artÃ­culo basado en el texto extraÃ­do:\\n\\n${formattedText}`;\r\n                        }\r\n\r\n                        setTitle(fileTitle);\r\n                        setContent(finalContent);\r\n                    }\r\n                    // Caso por defecto\r\n                    else {\r\n                        setTitle(getTitleByContentType(data.contentType));\r\n                        setContent(\"No se pudo extraer contenido. Por favor, edita este texto manualmente.\");\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error al procesar datos:\", error);\r\n                    setTitle(\"Error al procesar datos\");\r\n                    setContent(\"Hubo un error al procesar el contenido extraÃ­do.\");\r\n                } finally {\r\n                    setIsLoading(false);\r\n                }\r\n            }, 500);\r\n        } else {\r\n            setTitle(\"No hay datos disponibles\");\r\n            setContent(\"No se ha podido generar contenido porque no se recibieron datos.\");\r\n            setIsLoading(false);\r\n        }\r\n    }, [data]);\r\n\r\n    // FunciÃ³n para obtener un tÃ­tulo segÃºn el tipo de contenido\r\n    const getTitleByContentType = (contentType) => {\r\n        switch (contentType) {\r\n            case 'IMAGEN':\r\n                return \"Nueva imagen para redes sociales\";\r\n            case 'FLYER':\r\n                return \"Flyer promocional\";\r\n            case 'AUDIO':\r\n                return \"Audio para compartir\";\r\n            case 'ARTICULO':\r\n                return \"ArtÃ­culo de interÃ©s\";\r\n            default:\r\n                return \"Contenido para publicaciÃ³n\";\r\n        }\r\n    };\r\n\r\n    // FunciÃ³n para extraer el dominio de una URL\r\n    const extractDomain = (url) => {\r\n        try {\r\n            return new URL(url).hostname;\r\n        } catch (e) {\r\n            return url;\r\n        }\r\n    };\r\n\r\n    const handleCopy = () => {\r\n        const textToCopy = `${title}\\n\\n${content}`;\r\n        navigator.clipboard.writeText(textToCopy).then(() => {\r\n            setCopied(true);\r\n            setTimeout(() => setCopied(false), 2000);\r\n        });\r\n    };\r\n\r\n    const handleNetworkSelect = (network) => {\r\n        setSelectedNetwork(network);\r\n    };\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <Paper elevation={3} sx={{\r\n                padding: '2rem',\r\n                margin: '2rem',\r\n                width: '100%',\r\n                backgroundColor: '#fff',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                minHeight: '300px'\r\n            }}>\r\n                <CircularProgress color=\"primary\" />\r\n                <Typography variant=\"h6\" sx={{ mt: 2 }}>\r\n                    Generando contenido...\r\n                </Typography>\r\n            </Paper>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} sx={{\r\n            padding: '2rem',\r\n            margin: '2rem',\r\n            width: '100%',\r\n            backgroundColor: '#fff'\r\n        }}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Contenido Generado\r\n            </Typography>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                    Selecciona una red social\r\n                </Typography>\r\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: '0.5rem' }}>\r\n                    {socialNetworks.map((network) => (\r\n                        <Button\r\n                            key={network.name}\r\n                            variant={selectedNetwork === network.name ? \"contained\" : \"outlined\"}\r\n                            sx={{\r\n                                backgroundColor: selectedNetwork === network.name ? network.color : 'transparent',\r\n                                color: selectedNetwork === network.name ? '#fff' : network.color,\r\n                                borderColor: network.color,\r\n                                '&:hover': {\r\n                                    backgroundColor: network.color,\r\n                                    color: '#fff',\r\n                                    opacity: 0.9\r\n                                }\r\n                            }}\r\n                            onClick={() => handleNetworkSelect(network.name)}\r\n                        >\r\n                            {network.name}\r\n                        </Button>\r\n                    ))}\r\n                </Box>\r\n            </Box>\r\n\r\n            <Divider sx={{ my: 2 }} />\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    TÃ­tulo\r\n                </Typography>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    value={title}\r\n                    onChange={(e) => setTitle(e.target.value)}\r\n                />\r\n            </Box>\r\n\r\n            <Box sx={{ mb: 3 }}>\r\n                <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 1 }}>\r\n                    <Typography variant=\"h6\">\r\n                        Contenido de la publicaciÃ³n\r\n                    </Typography>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        onClick={handleCopy}\r\n                        color={copied ? \"success\" : \"primary\"}\r\n                    >\r\n                        {copied ? \"Â¡Copiado!\" : \"Copiar\"}\r\n                    </Button>\r\n                </Box>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    multiline\r\n                    rows={8}\r\n                    fullWidth\r\n                    value={content}\r\n                    onChange={(e) => setContent(e.target.value)}\r\n                />\r\n            </Box>\r\n\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-between', mt: 3 }}>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    onClick={onBack}\r\n                >\r\n                    Volver\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                        backgroundColor: '#ff9800',\r\n                        color: '#fff',\r\n                        '&:hover': { backgroundColor: '#e65100' }\r\n                    }}\r\n                >\r\n                    Publicar\r\n                </Button>\r\n            </Box>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default GeneratedContent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,EAAEC,MAAM,EAAEC,KAAK,EAAEC,SAAS,EAAEC,GAAG,EAAEC,gBAAgB,EAAEC,OAAO,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErG,MAAMC,gBAAgB,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAO,CAAC,KAAK;EAAAC,EAAA;EAC3C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACqB,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACuB,SAAS,EAAEC,YAAY,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMyB,cAAc,GAAG,CACnB;IAAEC,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAU,CAAC,EACtC;IAAED,IAAI,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAU,CAAC,EACtC;IAAED,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAU,CAAC,EACrC;IAAED,IAAI,EAAE,WAAW;IAAEC,KAAK,EAAE;EAAU,CAAC,CAC1C;EAED1B,SAAS,CAAC,MAAM;IACZ,IAAIW,IAAI,EAAE;MACN;MACAgB,UAAU,CAAC,MAAM;QACb,IAAI;UACA;UACA,IAAIhB,IAAI,CAACiB,eAAe,IAAIjB,IAAI,CAACiB,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;YACzD;YACA,IAAIC,cAAc,GAAG,EAAE;YACvB,KAAK,MAAMC,IAAI,IAAIpB,IAAI,CAACiB,eAAe,EAAE;cACrC,IAAIG,IAAI,CAACjB,KAAK,IAAIiB,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,CAAC,EAAE;gBACjCF,cAAc,GAAGC,IAAI,CAACjB,KAAK;gBAC3B;cACJ;YACJ;;YAEA;YACA,IAAI,CAACgB,cAAc,EAAE;cACjBA,cAAc,GAAGG,qBAAqB,CAACtB,IAAI,CAACuB,WAAW,CAAC;YAC5D;;YAEA;YACA,IAAIC,gBAAgB,GAAG,EAAE;YACzBxB,IAAI,CAACiB,eAAe,CAACQ,OAAO,CAAEC,KAAK,IAAK;cACpC,IAAIA,KAAK,CAACC,SAAS,IAAID,KAAK,CAACC,SAAS,CAACN,IAAI,CAAC,CAAC,EAAE;gBAC3C,MAAMO,MAAM,GAAGC,aAAa,CAACH,KAAK,CAACI,GAAG,CAAC;gBACvCN,gBAAgB,IAAI,SAASI,MAAM,OAAO;gBAC1CJ,gBAAgB,IAAIE,KAAK,CAACC,SAAS,CAACI,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,SAAS;cACrE;YACJ,CAAC,CAAC;;YAEF;YACAP,gBAAgB,IAAI,aAAa,GAAGxB,IAAI,CAACiB,eAAe,CACnDe,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACH,GAAG,IAAI,KAAK,CAAC,CACxBI,IAAI,CAAC,IAAI,CAAC;YAEf9B,QAAQ,CAACe,cAAc,CAAC;YACxBb,UAAU,CAACkB,gBAAgB,CAAC;UAChC;UACA;UAAA,KACK,IAAIxB,IAAI,CAACmC,cAAc,EAAE;YAC1B;YACA,MAAMC,SAAS,GAAGpC,IAAI,CAACqC,WAAW,GAC5B,0BAA0BrC,IAAI,CAACqC,WAAW,GAAG,GAC7Cf,qBAAqB,CAACtB,IAAI,CAACuB,WAAW,CAAC;;YAE7C;YACA,IAAIe,aAAa,GAAGtC,IAAI,CAACmC,cAAc;;YAEvC;YACA,IAAII,YAAY,GAAGD,aAAa;;YAEhC;YACA,IAAItC,IAAI,CAACuB,WAAW,KAAK,UAAU,EAAE;cACjCgB,YAAY,GAAG,0EAA0ED,aAAa,EAAE;YAC5G;YAEAlC,QAAQ,CAACgC,SAAS,CAAC;YACnB9B,UAAU,CAACiC,YAAY,CAAC;UAC5B;UACA;UAAA,KACK;YACDnC,QAAQ,CAACkB,qBAAqB,CAACtB,IAAI,CAACuB,WAAW,CAAC,CAAC;YACjDjB,UAAU,CAAC,wEAAwE,CAAC;UACxF;QACJ,CAAC,CAAC,OAAOkC,KAAK,EAAE;UACZC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;UAChDpC,QAAQ,CAAC,yBAAyB,CAAC;UACnCE,UAAU,CAAC,kDAAkD,CAAC;QAClE,CAAC,SAAS;UACNM,YAAY,CAAC,KAAK,CAAC;QACvB;MACJ,CAAC,EAAE,GAAG,CAAC;IACX,CAAC,MAAM;MACHR,QAAQ,CAAC,0BAA0B,CAAC;MACpCE,UAAU,CAAC,kEAAkE,CAAC;MAC9EM,YAAY,CAAC,KAAK,CAAC;IACvB;EACJ,CAAC,EAAE,CAACZ,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMsB,qBAAqB,GAAIC,WAAW,IAAK;IAC3C,QAAQA,WAAW;MACf,KAAK,QAAQ;QACT,OAAO,kCAAkC;MAC7C,KAAK,OAAO;QACR,OAAO,mBAAmB;MAC9B,KAAK,OAAO;QACR,OAAO,sBAAsB;MACjC,KAAK,UAAU;QACX,OAAO,qBAAqB;MAChC;QACI,OAAO,4BAA4B;IAC3C;EACJ,CAAC;;EAED;EACA,MAAMM,aAAa,GAAIC,GAAG,IAAK;IAC3B,IAAI;MACA,OAAO,IAAIY,GAAG,CAACZ,GAAG,CAAC,CAACa,QAAQ;IAChC,CAAC,CAAC,OAAOC,CAAC,EAAE;MACR,OAAOd,GAAG;IACd;EACJ,CAAC;EAED,MAAMe,UAAU,GAAGA,CAAA,KAAM;IACrB,MAAMC,UAAU,GAAG,GAAG3C,KAAK,OAAOE,OAAO,EAAE;IAC3C0C,SAAS,CAACC,SAAS,CAACC,SAAS,CAACH,UAAU,CAAC,CAACI,IAAI,CAAC,MAAM;MACjD1C,SAAS,CAAC,IAAI,CAAC;MACfQ,UAAU,CAAC,MAAMR,SAAS,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;IAC5C,CAAC,CAAC;EACN,CAAC;EAED,MAAM2C,mBAAmB,GAAIC,OAAO,IAAK;IACrC1C,kBAAkB,CAAC0C,OAAO,CAAC;EAC/B,CAAC;EAED,IAAIzC,SAAS,EAAE;IACX,oBACIb,OAAA,CAACN,KAAK;MAAC6D,SAAS,EAAE,CAAE;MAACC,EAAE,EAAE;QACrBC,OAAO,EAAE,MAAM;QACfC,MAAM,EAAE,MAAM;QACdC,KAAK,EAAE,MAAM;QACbC,eAAe,EAAE,MAAM;QACvBC,OAAO,EAAE,MAAM;QACfC,aAAa,EAAE,QAAQ;QACvBC,UAAU,EAAE,QAAQ;QACpBC,cAAc,EAAE,QAAQ;QACxBC,SAAS,EAAE;MACf,CAAE;MAAAC,QAAA,gBACElE,OAAA,CAACH,gBAAgB;QAACoB,KAAK,EAAC;MAAS;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpCtE,OAAA,CAACR,UAAU;QAAC+E,OAAO,EAAC,IAAI;QAACf,EAAE,EAAE;UAAEgB,EAAE,EAAE;QAAE,CAAE;QAAAN,QAAA,EAAC;MAExC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAEhB;EAEA,oBACItE,OAAA,CAACN,KAAK;IAAC6D,SAAS,EAAE,CAAE;IAACC,EAAE,EAAE;MACrBC,OAAO,EAAE,MAAM;MACfC,MAAM,EAAE,MAAM;MACdC,KAAK,EAAE,MAAM;MACbC,eAAe,EAAE;IACrB,CAAE;IAAAM,QAAA,gBACElE,OAAA,CAACR,UAAU;MAAC+E,OAAO,EAAC,IAAI;MAACE,YAAY;MAAAP,QAAA,EAAC;IAEtC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEbtE,OAAA,CAACJ,GAAG;MAAC4D,EAAE,EAAE;QAAEkB,EAAE,EAAE;MAAE,CAAE;MAAAR,QAAA,gBACflE,OAAA,CAACR,UAAU;QAAC+E,OAAO,EAAC,OAAO;QAACE,YAAY;QAAAP,QAAA,EAAC;MAEzC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbtE,OAAA,CAACJ,GAAG;QAAC4D,EAAE,EAAE;UAAEK,OAAO,EAAE,MAAM;UAAEc,QAAQ,EAAE,MAAM;UAAEC,GAAG,EAAE;QAAS,CAAE;QAAAV,QAAA,EACzDnD,cAAc,CAACmB,GAAG,CAAEoB,OAAO,iBACxBtD,OAAA,CAACP,MAAM;UAEH8E,OAAO,EAAE5D,eAAe,KAAK2C,OAAO,CAACtC,IAAI,GAAG,WAAW,GAAG,UAAW;UACrEwC,EAAE,EAAE;YACAI,eAAe,EAAEjD,eAAe,KAAK2C,OAAO,CAACtC,IAAI,GAAGsC,OAAO,CAACrC,KAAK,GAAG,aAAa;YACjFA,KAAK,EAAEN,eAAe,KAAK2C,OAAO,CAACtC,IAAI,GAAG,MAAM,GAAGsC,OAAO,CAACrC,KAAK;YAChE4D,WAAW,EAAEvB,OAAO,CAACrC,KAAK;YAC1B,SAAS,EAAE;cACP2C,eAAe,EAAEN,OAAO,CAACrC,KAAK;cAC9BA,KAAK,EAAE,MAAM;cACb6D,OAAO,EAAE;YACb;UACJ,CAAE;UACFC,OAAO,EAAEA,CAAA,KAAM1B,mBAAmB,CAACC,OAAO,CAACtC,IAAI,CAAE;UAAAkD,QAAA,EAEhDZ,OAAO,CAACtC;QAAI,GAdRsC,OAAO,CAACtC,IAAI;UAAAmD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAeb,CACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAENtE,OAAA,CAACF,OAAO;MAAC0D,EAAE,EAAE;QAAEwB,EAAE,EAAE;MAAE;IAAE;MAAAb,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAE1BtE,OAAA,CAACJ,GAAG;MAAC4D,EAAE,EAAE;QAAEkB,EAAE,EAAE;MAAE,CAAE;MAAAR,QAAA,gBACflE,OAAA,CAACR,UAAU;QAAC+E,OAAO,EAAC,IAAI;QAACE,YAAY;QAAAP,QAAA,EAAC;MAEtC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbtE,OAAA,CAACL,SAAS;QACN4E,OAAO,EAAC,UAAU;QAClBU,SAAS;QACTC,KAAK,EAAE7E,KAAM;QACb8E,QAAQ,EAAGrC,CAAC,IAAKxC,QAAQ,CAACwC,CAAC,CAACsC,MAAM,CAACF,KAAK;MAAE;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENtE,OAAA,CAACJ,GAAG;MAAC4D,EAAE,EAAE;QAAEkB,EAAE,EAAE;MAAE,CAAE;MAAAR,QAAA,gBACflE,OAAA,CAACJ,GAAG;QAAC4D,EAAE,EAAE;UAAEK,OAAO,EAAE,MAAM;UAAEE,UAAU,EAAE,QAAQ;UAAEC,cAAc,EAAE,eAAe;UAAEU,EAAE,EAAE;QAAE,CAAE;QAAAR,QAAA,gBACvFlE,OAAA,CAACR,UAAU;UAAC+E,OAAO,EAAC,IAAI;UAAAL,QAAA,EAAC;QAEzB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACbtE,OAAA,CAACP,MAAM;UACH8E,OAAO,EAAC,UAAU;UAClBc,IAAI,EAAC,OAAO;UACZN,OAAO,EAAEhC,UAAW;UACpB9B,KAAK,EAAER,MAAM,GAAG,SAAS,GAAG,SAAU;UAAAyD,QAAA,EAErCzD,MAAM,GAAG,WAAW,GAAG;QAAQ;UAAA0D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC5B,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC,eACNtE,OAAA,CAACL,SAAS;QACN4E,OAAO,EAAC,UAAU;QAClBe,SAAS;QACTC,IAAI,EAAE,CAAE;QACRN,SAAS;QACTC,KAAK,EAAE3E,OAAQ;QACf4E,QAAQ,EAAGrC,CAAC,IAAKtC,UAAU,CAACsC,CAAC,CAACsC,MAAM,CAACF,KAAK;MAAE;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENtE,OAAA,CAACJ,GAAG;MAAC4D,EAAE,EAAE;QAAEK,OAAO,EAAE,MAAM;QAAEG,cAAc,EAAE,eAAe;QAAEQ,EAAE,EAAE;MAAE,CAAE;MAAAN,QAAA,gBACjElE,OAAA,CAACP,MAAM;QACH8E,OAAO,EAAC,UAAU;QAClBQ,OAAO,EAAE5E,MAAO;QAAA+D,QAAA,EACnB;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTtE,OAAA,CAACP,MAAM;QACH8E,OAAO,EAAC,WAAW;QACnBf,EAAE,EAAE;UACAI,eAAe,EAAE,SAAS;UAC1B3C,KAAK,EAAE,MAAM;UACb,SAAS,EAAE;YAAE2C,eAAe,EAAE;UAAU;QAC5C,CAAE;QAAAM,QAAA,EACL;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEhB,CAAC;AAAClE,EAAA,CAzPIH,gBAAgB;AAAAuF,EAAA,GAAhBvF,gBAAgB;AA2PtB,eAAeA,gBAAgB;AAAC,IAAAuF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}