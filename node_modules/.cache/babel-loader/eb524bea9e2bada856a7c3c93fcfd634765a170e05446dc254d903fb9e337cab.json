{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SOAINT\\\\Desktop\\\\Generador-Contenido-AWS\\\\GENERADOR_AWS_POC\\\\src\\\\components\\\\NewPublication\\\\NewPublication.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUploader from '../FileUploader/FileUploader';\nimport ContentTypeSelector from '../ContentTypeSelector/ContentTypeSelector';\nimport TechnicalFields from '../TechnicalFields/TechnicalFields';\nimport GeneratedContent from '../GeneratedContent/GeneratedContent';\nimport { Typography, Button, Paper, CircularProgress, Snackbar, Alert, Box } from '@mui/material';\n\n// Configuración de endpoint real para web scraping\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WEBSCRAPING_API_ENDPOINT = 'https://6z7btlmzah.execute-api.us-east-2.amazonaws.com/api-aws/scrape';\nconst NewPublication = () => {\n  _s();\n  const [archivo, setArchivo] = useState(null);\n  const [urls, setUrls] = useState([]);\n  const [tipoContenido, setTipoContenido] = useState('PUBLICACION');\n  const [resolucion, setResolucion] = useState('');\n  const [formato, setFormato] = useState('');\n  const [aspectRatio, setAspectRatio] = useState('');\n  const [showGeneratedContent, setShowGeneratedContent] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [generatedData, setGeneratedData] = useState(null);\n  const [apiResponse, setApiResponse] = useState(null);\n  const [debug, setDebug] = useState(true);\n  const handleFileChange = file => {\n    console.log(\"Archivo seleccionado:\", file);\n    setArchivo(file);\n  };\n  const handleUrlChange = urlsList => {\n    console.log(\"URLs cambiadas:\", urlsList);\n    setUrls(urlsList);\n  };\n  const handleContentTypeSelect = tipo => {\n    console.log(\"Tipo de contenido seleccionado:\", tipo);\n    setTipoContenido(tipo);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(\"Iniciando generación de contenido...\");\n    console.log(\"URLs disponibles:\", urls);\n    console.log(\"Archivo disponible:\", archivo);\n\n    // Validar que se haya ingresado al menos un archivo o una URL\n    if (!archivo && urls.length === 0) {\n      const errorMsg = 'Por favor, proporciona un archivo o al menos una URL.';\n      console.error(errorMsg);\n      setError(errorMsg);\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setApiResponse(null);\n    try {\n      let processedData;\n\n      // Determinar qué API llamar basado en si tenemos un archivo o URLs\n      if (urls.length > 0) {\n        console.log('Procesando URLs mediante Web Scraping:', urls);\n\n        // Crear objeto de datos para enviar\n        const scrapingRequestData = {\n          urls: urls\n        };\n        console.log(\"Enviando request a:\", WEBSCRAPING_API_ENDPOINT);\n        console.log(\"Datos de request:\", JSON.stringify(scrapingRequestData, null, 2));\n        const response = await fetch(WEBSCRAPING_API_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(scrapingRequestData)\n        });\n        console.log(\"Respuesta recibida - Status:\", response.status);\n        const responseText = await response.text();\n        console.log(\"Respuesta como texto:\", responseText);\n        try {\n          // Primer parsing para obtener la respuesta principal\n          const initialData = JSON.parse(responseText);\n          console.log(\"Respuesta inicial parseada:\", initialData);\n\n          // La respuesta tiene una estructura donde el contenido real está en \"body\" como string\n          if (initialData.statusCode === 200 && initialData.body) {\n            // Segundo parsing para obtener el contenido real del body\n            const bodyData = JSON.parse(initialData.body);\n            console.log(\"Datos del body parseados:\", bodyData);\n\n            // Guardar respuesta completa para debug\n            setApiResponse(bodyData);\n\n            // Extraer y procesar los resultados del scraping\n            if (bodyData.results && Array.isArray(bodyData.results)) {\n              // Transformar los datos para GeneratedContent\n              processedData = {\n                success: true,\n                contentType: tipoContenido,\n                scraped_content: bodyData.results,\n                technicalProperties: {\n                  resolution: resolucion,\n                  format: formato,\n                  aspectRatio: aspectRatio\n                },\n                stats: bodyData.stats\n              };\n            } else {\n              throw new Error(\"No se encontraron resultados de scraping\");\n            }\n          } else {\n            throw new Error(`Error en la respuesta: ${initialData.statusCode}`);\n          }\n        } catch (jsonError) {\n          console.error(\"Error al parsear JSON:\", jsonError);\n          throw new Error(`Error al procesar la respuesta: ${responseText.substring(0, 100)}...`);\n        }\n      } else if (archivo) {\n        console.log('Procesando archivo (simulado por ahora):', archivo);\n\n        // Simulación de respuesta para pruebas\n        setTimeout(() => {\n          processedData = {\n            success: true,\n            extracted_text: `Texto extraído del documento \"${archivo.name}\" (simulado).\\n\\nEste es un contenido de ejemplo.`,\n            contentType: tipoContenido,\n            technicalProperties: {\n              resolution: resolucion,\n              format: formato,\n              aspectRatio: aspectRatio\n            }\n          };\n          console.log(\"Datos simulados OCR:\", processedData);\n          setApiResponse(processedData);\n          setGeneratedData(processedData);\n          setShowGeneratedContent(true);\n          setIsLoading(false);\n        }, 2000);\n        return; // Salir temprano para la simulación\n      }\n      console.log(\"Estableciendo datos generados y mostrando contenido:\", processedData);\n      setGeneratedData(processedData);\n      setShowGeneratedContent(true);\n    } catch (error) {\n      console.error('Error al generar contenido:', error);\n      setError(error.message || 'Ocurrió un error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleBack = () => {\n    console.log(\"Volviendo a la pantalla de formulario\");\n    setShowGeneratedContent(false);\n  };\n  if (showGeneratedContent) {\n    console.log(\"Renderizando componente GeneratedContent con datos:\", generatedData);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [debug && apiResponse && /*#__PURE__*/_jsxDEV(Paper, {\n        elevation: 3,\n        sx: {\n          padding: '1rem',\n          marginBottom: '1rem',\n          backgroundColor: '#f5f5f5'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Modo Debug - Respuesta API\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          style: {\n            overflow: 'auto',\n            maxHeight: '200px',\n            fontSize: '0.75rem'\n          },\n          children: JSON.stringify(apiResponse, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: () => setShowGeneratedContent(false),\n          children: \"Volver al formulario\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(GeneratedContent, {\n        data: generatedData,\n        onBack: handleBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      padding: '2rem',\n      margin: '2rem',\n      width: '100%',\n      backgroundColor: '#ffffff'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Nueva publicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n      onFileChange: handleFileChange,\n      onUrlChange: handleUrlChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContentTypeSelector, {\n      onContentTypeSelect: handleContentTypeSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TechnicalFields, {\n      resolucion: resolucion,\n      formato: formato,\n      aspectRatio: aspectRatio,\n      onResolucionChange: e => setResolucion(e.target.value),\n      onFormatoChange: e => setFormato(e.target.value),\n      onAspectRatioChange: e => setAspectRatio(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      sx: {\n        backgroundColor: '#ff9800',\n        color: '#fff',\n        '&:hover': {\n          backgroundColor: '#e65100'\n        }\n      },\n      onClick: handleSubmit,\n      disabled: isLoading,\n      children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 24,\n        color: \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 30\n      }, this) : 'Generar contenido'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }, this), debug && apiResponse && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3,\n        p: 2,\n        border: '1px solid #ccc',\n        borderRadius: '4px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Modo Debug - Respuesta API\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          overflow: 'auto',\n          maxHeight: '200px',\n          fontSize: '0.75rem'\n        },\n        children: JSON.stringify(apiResponse, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!error,\n      autoHideDuration: 6000,\n      onClose: () => setError(null),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setError(null),\n        severity: \"error\",\n        sx: {\n          width: '100%'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 187,\n    columnNumber: 9\n  }, this);\n};\n_s(NewPublication, \"FK0RGjiw9TObufydwH0vmdHgCyw=\");\n_c = NewPublication;\nexport default NewPublication;\nvar _c;\n$RefreshReg$(_c, \"NewPublication\");","map":{"version":3,"names":["React","useState","FileUploader","ContentTypeSelector","TechnicalFields","GeneratedContent","Typography","Button","Paper","CircularProgress","Snackbar","Alert","Box","jsxDEV","_jsxDEV","Fragment","_Fragment","WEBSCRAPING_API_ENDPOINT","NewPublication","_s","archivo","setArchivo","urls","setUrls","tipoContenido","setTipoContenido","resolucion","setResolucion","formato","setFormato","aspectRatio","setAspectRatio","showGeneratedContent","setShowGeneratedContent","isLoading","setIsLoading","error","setError","generatedData","setGeneratedData","apiResponse","setApiResponse","debug","setDebug","handleFileChange","file","console","log","handleUrlChange","urlsList","handleContentTypeSelect","tipo","handleSubmit","event","preventDefault","length","errorMsg","processedData","scrapingRequestData","JSON","stringify","response","fetch","method","headers","body","status","responseText","text","initialData","parse","statusCode","bodyData","results","Array","isArray","success","contentType","scraped_content","technicalProperties","resolution","format","stats","Error","jsonError","substring","setTimeout","extracted_text","name","message","handleBack","children","elevation","sx","padding","marginBottom","backgroundColor","variant","fileName","_jsxFileName","lineNumber","columnNumber","style","overflow","maxHeight","fontSize","onClick","data","onBack","margin","width","gutterBottom","onFileChange","onUrlChange","onContentTypeSelect","onResolucionChange","e","target","value","onFormatoChange","onAspectRatioChange","color","disabled","size","mt","p","border","borderRadius","open","autoHideDuration","onClose","severity","_c","$RefreshReg$"],"sources":["C:/Users/SOAINT/Desktop/Generador-Contenido-AWS/GENERADOR_AWS_POC/src/components/NewPublication/NewPublication.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport FileUploader from '../FileUploader/FileUploader';\r\nimport ContentTypeSelector from '../ContentTypeSelector/ContentTypeSelector';\r\nimport TechnicalFields from '../TechnicalFields/TechnicalFields';\r\nimport GeneratedContent from '../GeneratedContent/GeneratedContent';\r\nimport { Typography, Button, Paper, CircularProgress, Snackbar, Alert, Box } from '@mui/material';\r\n\r\n// Configuración de endpoint real para web scraping\r\nconst WEBSCRAPING_API_ENDPOINT = 'https://6z7btlmzah.execute-api.us-east-2.amazonaws.com/api-aws/scrape';\r\n\r\nconst NewPublication = () => {\r\n    const [archivo, setArchivo] = useState(null);\r\n    const [urls, setUrls] = useState([]);\r\n    const [tipoContenido, setTipoContenido] = useState('PUBLICACION');\r\n    const [resolucion, setResolucion] = useState('');\r\n    const [formato, setFormato] = useState('');\r\n    const [aspectRatio, setAspectRatio] = useState('');\r\n    const [showGeneratedContent, setShowGeneratedContent] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [generatedData, setGeneratedData] = useState(null);\r\n    const [apiResponse, setApiResponse] = useState(null);\r\n    const [debug, setDebug] = useState(true);\r\n\r\n    const handleFileChange = (file) => {\r\n        console.log(\"Archivo seleccionado:\", file);\r\n        setArchivo(file);\r\n    };\r\n\r\n    const handleUrlChange = (urlsList) => {\r\n        console.log(\"URLs cambiadas:\", urlsList);\r\n        setUrls(urlsList);\r\n    };\r\n\r\n    const handleContentTypeSelect = (tipo) => {\r\n        console.log(\"Tipo de contenido seleccionado:\", tipo);\r\n        setTipoContenido(tipo);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log(\"Iniciando generación de contenido...\");\r\n        console.log(\"URLs disponibles:\", urls);\r\n        console.log(\"Archivo disponible:\", archivo);\r\n\r\n        // Validar que se haya ingresado al menos un archivo o una URL\r\n        if (!archivo && urls.length === 0) {\r\n            const errorMsg = 'Por favor, proporciona un archivo o al menos una URL.';\r\n            console.error(errorMsg);\r\n            setError(errorMsg);\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n        setApiResponse(null);\r\n\r\n        try {\r\n            let processedData;\r\n\r\n            // Determinar qué API llamar basado en si tenemos un archivo o URLs\r\n            if (urls.length > 0) {\r\n                console.log('Procesando URLs mediante Web Scraping:', urls);\r\n\r\n                // Crear objeto de datos para enviar\r\n                const scrapingRequestData = {\r\n                    urls: urls\r\n                };\r\n\r\n                console.log(\"Enviando request a:\", WEBSCRAPING_API_ENDPOINT);\r\n                console.log(\"Datos de request:\", JSON.stringify(scrapingRequestData, null, 2));\r\n\r\n                const response = await fetch(WEBSCRAPING_API_ENDPOINT, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(scrapingRequestData)\r\n                });\r\n\r\n                console.log(\"Respuesta recibida - Status:\", response.status);\r\n\r\n                const responseText = await response.text();\r\n                console.log(\"Respuesta como texto:\", responseText);\r\n\r\n                try {\r\n                    // Primer parsing para obtener la respuesta principal\r\n                    const initialData = JSON.parse(responseText);\r\n                    console.log(\"Respuesta inicial parseada:\", initialData);\r\n\r\n                    // La respuesta tiene una estructura donde el contenido real está en \"body\" como string\r\n                    if (initialData.statusCode === 200 && initialData.body) {\r\n                        // Segundo parsing para obtener el contenido real del body\r\n                        const bodyData = JSON.parse(initialData.body);\r\n                        console.log(\"Datos del body parseados:\", bodyData);\r\n\r\n                        // Guardar respuesta completa para debug\r\n                        setApiResponse(bodyData);\r\n\r\n                        // Extraer y procesar los resultados del scraping\r\n                        if (bodyData.results && Array.isArray(bodyData.results)) {\r\n                            // Transformar los datos para GeneratedContent\r\n                            processedData = {\r\n                                success: true,\r\n                                contentType: tipoContenido,\r\n                                scraped_content: bodyData.results,\r\n                                technicalProperties: {\r\n                                    resolution: resolucion,\r\n                                    format: formato,\r\n                                    aspectRatio: aspectRatio\r\n                                },\r\n                                stats: bodyData.stats\r\n                            };\r\n                        } else {\r\n                            throw new Error(\"No se encontraron resultados de scraping\");\r\n                        }\r\n                    } else {\r\n                        throw new Error(`Error en la respuesta: ${initialData.statusCode}`);\r\n                    }\r\n                } catch (jsonError) {\r\n                    console.error(\"Error al parsear JSON:\", jsonError);\r\n                    throw new Error(`Error al procesar la respuesta: ${responseText.substring(0, 100)}...`);\r\n                }\r\n            } else if (archivo) {\r\n                console.log('Procesando archivo (simulado por ahora):', archivo);\r\n\r\n                // Simulación de respuesta para pruebas\r\n                setTimeout(() => {\r\n                    processedData = {\r\n                        success: true,\r\n                        extracted_text: `Texto extraído del documento \"${archivo.name}\" (simulado).\\n\\nEste es un contenido de ejemplo.`,\r\n                        contentType: tipoContenido,\r\n                        technicalProperties: {\r\n                            resolution: resolucion,\r\n                            format: formato,\r\n                            aspectRatio: aspectRatio\r\n                        }\r\n                    };\r\n\r\n                    console.log(\"Datos simulados OCR:\", processedData);\r\n                    setApiResponse(processedData);\r\n                    setGeneratedData(processedData);\r\n                    setShowGeneratedContent(true);\r\n                    setIsLoading(false);\r\n                }, 2000);\r\n\r\n                return; // Salir temprano para la simulación\r\n            }\r\n\r\n            console.log(\"Estableciendo datos generados y mostrando contenido:\", processedData);\r\n            setGeneratedData(processedData);\r\n            setShowGeneratedContent(true);\r\n        } catch (error) {\r\n            console.error('Error al generar contenido:', error);\r\n            setError(error.message || 'Ocurrió un error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleBack = () => {\r\n        console.log(\"Volviendo a la pantalla de formulario\");\r\n        setShowGeneratedContent(false);\r\n    };\r\n\r\n    if (showGeneratedContent) {\r\n        console.log(\"Renderizando componente GeneratedContent con datos:\", generatedData);\r\n        return (\r\n            <>\r\n                {debug && apiResponse && (\r\n                    <Paper elevation={3} sx={{ padding: '1rem', marginBottom: '1rem', backgroundColor: '#f5f5f5' }}>\r\n                        <Typography variant=\"h6\">Modo Debug - Respuesta API</Typography>\r\n                        <pre style={{ overflow: 'auto', maxHeight: '200px', fontSize: '0.75rem' }}>\r\n                            {JSON.stringify(apiResponse, null, 2)}\r\n                        </pre>\r\n                        <Button variant=\"outlined\" onClick={() => setShowGeneratedContent(false)}>\r\n                            Volver al formulario\r\n                        </Button>\r\n                    </Paper>\r\n                )}\r\n                <GeneratedContent data={generatedData} onBack={handleBack} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} sx={{ padding: '2rem', margin: '2rem', width: '100%', backgroundColor: '#ffffff' }}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Nueva publicación\r\n            </Typography>\r\n\r\n            <FileUploader\r\n                onFileChange={handleFileChange}\r\n                onUrlChange={handleUrlChange}\r\n            />\r\n\r\n            <ContentTypeSelector onContentTypeSelect={handleContentTypeSelect} />\r\n\r\n            <TechnicalFields\r\n                resolucion={resolucion}\r\n                formato={formato}\r\n                aspectRatio={aspectRatio}\r\n                onResolucionChange={(e) => setResolucion(e.target.value)}\r\n                onFormatoChange={(e) => setFormato(e.target.value)}\r\n                onAspectRatioChange={(e) => setAspectRatio(e.target.value)}\r\n            />\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                sx={{\r\n                    backgroundColor: '#ff9800',\r\n                    color: '#fff',\r\n                    '&:hover': { backgroundColor: '#e65100' }\r\n                }}\r\n                onClick={handleSubmit}\r\n                disabled={isLoading}\r\n            >\r\n                {isLoading ? <CircularProgress size={24} color=\"inherit\" /> : 'Generar contenido'}\r\n            </Button>\r\n\r\n            {debug && apiResponse && (\r\n                <Box sx={{ mt: 3, p: 2, border: '1px solid #ccc', borderRadius: '4px' }}>\r\n                    <Typography variant=\"h6\">Modo Debug - Respuesta API</Typography>\r\n                    <pre style={{ overflow: 'auto', maxHeight: '200px', fontSize: '0.75rem' }}>\r\n                        {JSON.stringify(apiResponse, null, 2)}\r\n                    </pre>\r\n                </Box>\r\n            )}\r\n\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError(null)}>\r\n                <Alert onClose={() => setError(null)} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default NewPublication;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}