{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SOAINT\\\\Desktop\\\\Generador-Contenido-AWS\\\\GENERADOR_AWS_POC\\\\src\\\\components\\\\NewPublication\\\\NewPublication.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUploader from '../FileUploader/FileUploader';\nimport ContentTypeSelector from '../ContentTypeSelector/ContentTypeSelector';\nimport TechnicalFields from '../TechnicalFields/TechnicalFields';\nimport GeneratedContent from '../GeneratedContent/GeneratedContent';\nimport { Typography, Button, Paper, CircularProgress, Snackbar, Alert, Box } from '@mui/material';\n\n// Configuración de endpoints\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WEBSCRAPING_API_ENDPOINT = 'https://6z7btlmzah.execute-api.us-east-2.amazonaws.com/api-aws/scrape';\nconst OCR_API_ENDPOINT = 'https://fq5ksi9kw8.execute-api.us-east-2.amazonaws.com/OCR/process';\nconst NewPublication = () => {\n  _s();\n  const [archivo, setArchivo] = useState(null);\n  const [urls, setUrls] = useState([]);\n  const [tipoContenido, setTipoContenido] = useState('PUBLICACION');\n  const [resolucion, setResolucion] = useState('');\n  const [formato, setFormato] = useState('');\n  const [aspectRatio, setAspectRatio] = useState('');\n  const [showGeneratedContent, setShowGeneratedContent] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [generatedData, setGeneratedData] = useState(null);\n  const [debug, setDebug] = useState(true);\n  const handleFileChange = file => {\n    console.log(\"Archivo seleccionado:\", file);\n    setArchivo(file);\n  };\n  const handleUrlChange = urlsList => {\n    console.log(\"URLs cambiadas:\", urlsList);\n    setUrls(urlsList);\n  };\n  const handleContentTypeSelect = tipo => {\n    console.log(\"Tipo de contenido seleccionado:\", tipo);\n    setTipoContenido(tipo);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(\"Iniciando generación de contenido...\");\n\n    // Validar que se haya ingresado al menos un archivo o una URL\n    if (!archivo && urls.length === 0) {\n      const errorMsg = 'Por favor, proporciona un archivo o al menos una URL.';\n      console.error(errorMsg);\n      setError(errorMsg);\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      let processedData;\n\n      // Determinar qué API llamar basado en si tenemos un archivo o URLs\n      if (urls.length > 0) {\n        // ===== PROCESAMIENTO WEB SCRAPING =====\n        console.log('Procesando URLs mediante Web Scraping:', urls);\n\n        // Crear objeto de datos para enviar\n        const scrapingRequestData = {\n          urls: urls\n        };\n        console.log(\"Enviando request a:\", WEBSCRAPING_API_ENDPOINT);\n        const response = await fetch(WEBSCRAPING_API_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(scrapingRequestData)\n        });\n        console.log(\"Respuesta recibida - Status:\", response.status);\n        const responseText = await response.text();\n        try {\n          // Primer parsing para obtener la respuesta principal\n          const initialData = JSON.parse(responseText);\n          console.log(\"Respuesta inicial parseada - statusCode:\", initialData.statusCode);\n\n          // La respuesta tiene una estructura donde el contenido real está en \"body\" como string\n          if (initialData.statusCode === 200 && initialData.body) {\n            // Segundo parsing para obtener el contenido real del body\n            const bodyData = JSON.parse(initialData.body);\n            console.log(\"Datos del body parseados - message:\", bodyData.message);\n\n            // Extraer y procesar los resultados del scraping\n            if (bodyData.results && Array.isArray(bodyData.results)) {\n              // Transformar los datos para GeneratedContent\n              processedData = {\n                success: true,\n                contentType: tipoContenido,\n                scraped_content: bodyData.results,\n                technicalProperties: {\n                  resolution: resolucion,\n                  format: formato,\n                  aspectRatio: aspectRatio\n                },\n                stats: bodyData.stats\n              };\n              console.log(\"Datos procesados de Web Scraping listos\");\n            } else {\n              throw new Error(\"No se encontraron resultados de scraping\");\n            }\n          } else {\n            throw new Error(`Error en la respuesta: ${initialData.statusCode}`);\n          }\n        } catch (jsonError) {\n          console.error(\"Error al parsear JSON:\", jsonError);\n          throw new Error(`Error al procesar la respuesta: ${responseText.substring(0, 100)}...`);\n        }\n      } else if (archivo) {\n        // ===== PROCESAMIENTO OCR =====\n        console.log('Procesando archivo mediante OCR:', archivo);\n\n        // Crear un objeto FormData para enviar el archivo\n        const formData = new FormData();\n        formData.append('file', archivo);\n        formData.append('filename', archivo.name);\n        console.log(\"Enviando archivo a OCR API:\", OCR_API_ENDPOINT);\n        try {\n          const response = await fetch(OCR_API_ENDPOINT, {\n            method: 'POST',\n            body: formData\n            // No incluir Content-Type en los headers, el navegador lo establecerá automáticamente\n            // con el boundary correcto para multipart/form-data\n          });\n          console.log(\"Respuesta OCR recibida - Status:\", response.status);\n          if (!response.ok) {\n            throw new Error(`Error en la llamada a OCR API: ${response.status}`);\n          }\n          const ocrData = await response.json();\n          console.log(\"Datos OCR recibidos:\", ocrData);\n\n          // Transformar los datos para GeneratedContent\n          processedData = {\n            success: true,\n            contentType: tipoContenido,\n            extracted_text: ocrData.text || ocrData.extracted_text || \"No se pudo extraer texto del documento.\",\n            source_file: archivo.name,\n            technicalProperties: {\n              resolution: resolucion,\n              format: formato,\n              aspectRatio: aspectRatio\n            }\n          };\n          console.log(\"Datos procesados de OCR listos\");\n        } catch (ocrError) {\n          console.error(\"Error al procesar OCR:\", ocrError);\n          throw new Error(`Error al procesar OCR: ${ocrError.message}`);\n        }\n      }\n      console.log(\"Estableciendo datos generados\");\n      setGeneratedData(processedData);\n      console.log(\"Cambiando estado para mostrar contenido generado\");\n      setShowGeneratedContent(true);\n    } catch (error) {\n      console.error('Error al generar contenido:', error);\n      setError(error.message || 'Ocurrió un error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleBack = () => {\n    console.log(\"Volviendo a la pantalla de formulario\");\n    setShowGeneratedContent(false);\n  };\n  console.log(\"Renderizando NewPublication - showGeneratedContent:\", showGeneratedContent);\n  console.log(\"Renderizando NewPublication - generatedData:\", !!generatedData);\n\n  // Panel de depuración para monitorear el estado\n  const DebugPanel = () => /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      position: 'fixed',\n      bottom: '10px',\n      right: '10px',\n      zIndex: 9999,\n      bgcolor: 'rgba(0,0,0,0.8)',\n      color: 'white',\n      p: 2,\n      borderRadius: 1,\n      maxWidth: '300px',\n      fontSize: '0.75rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      sx: {\n        mb: 1\n      },\n      children: \"Estado de la Aplicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      component: \"pre\",\n      sx: {\n        m: 0,\n        fontSize: '0.7rem'\n      },\n      children: `URLs: ${urls.length}\nArchivo: ${archivo ? archivo.name : 'No'}\nTipo: ${tipoContenido}\nMostrar generado: ${showGeneratedContent}\nCargando: ${isLoading}\nDatos generados: ${!!generatedData}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n  if (showGeneratedContent) {\n    console.log(\"Renderizando componente GeneratedContent con datos:\", generatedData);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [debug && /*#__PURE__*/_jsxDEV(DebugPanel, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 27\n      }, this), /*#__PURE__*/_jsxDEV(GeneratedContent, {\n        data: generatedData,\n        onBack: handleBack\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [debug && /*#__PURE__*/_jsxDEV(DebugPanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 3,\n      sx: {\n        padding: '2rem',\n        margin: '2rem',\n        width: '100%',\n        backgroundColor: '#ffffff'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: \"Nueva publicaci\\xF3n\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n        onFileChange: handleFileChange,\n        onUrlChange: handleUrlChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ContentTypeSelector, {\n        onContentTypeSelect: handleContentTypeSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TechnicalFields, {\n        resolucion: resolucion,\n        formato: formato,\n        aspectRatio: aspectRatio,\n        onResolucionChange: e => setResolucion(e.target.value),\n        onFormatoChange: e => setFormato(e.target.value),\n        onAspectRatioChange: e => setAspectRatio(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        sx: {\n          backgroundColor: '#ff9800',\n          color: '#fff',\n          '&:hover': {\n            backgroundColor: '#e65100'\n          }\n        },\n        onClick: handleSubmit,\n        disabled: isLoading,\n        children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 24,\n          color: \"inherit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 34\n        }, this) : 'Generar contenido'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n        open: !!error,\n        autoHideDuration: 6000,\n        onClose: () => setError(null),\n        children: /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: () => setError(null),\n          severity: \"error\",\n          sx: {\n            width: '100%'\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(NewPublication, \"NfyJjYqp5ecri7wfxvXxNteEUpE=\");\n_c = NewPublication;\nexport default NewPublication;\nvar _c;\n$RefreshReg$(_c, \"NewPublication\");","map":{"version":3,"names":["React","useState","FileUploader","ContentTypeSelector","TechnicalFields","GeneratedContent","Typography","Button","Paper","CircularProgress","Snackbar","Alert","Box","jsxDEV","_jsxDEV","Fragment","_Fragment","WEBSCRAPING_API_ENDPOINT","OCR_API_ENDPOINT","NewPublication","_s","archivo","setArchivo","urls","setUrls","tipoContenido","setTipoContenido","resolucion","setResolucion","formato","setFormato","aspectRatio","setAspectRatio","showGeneratedContent","setShowGeneratedContent","isLoading","setIsLoading","error","setError","generatedData","setGeneratedData","debug","setDebug","handleFileChange","file","console","log","handleUrlChange","urlsList","handleContentTypeSelect","tipo","handleSubmit","event","preventDefault","length","errorMsg","processedData","scrapingRequestData","response","fetch","method","headers","body","JSON","stringify","status","responseText","text","initialData","parse","statusCode","bodyData","message","results","Array","isArray","success","contentType","scraped_content","technicalProperties","resolution","format","stats","Error","jsonError","substring","formData","FormData","append","name","ok","ocrData","json","extracted_text","source_file","ocrError","handleBack","DebugPanel","sx","position","bottom","right","zIndex","bgcolor","color","p","borderRadius","maxWidth","fontSize","children","variant","mb","fileName","_jsxFileName","lineNumber","columnNumber","component","m","data","onBack","elevation","padding","margin","width","backgroundColor","gutterBottom","onFileChange","onUrlChange","onContentTypeSelect","onResolucionChange","e","target","value","onFormatoChange","onAspectRatioChange","onClick","disabled","size","open","autoHideDuration","onClose","severity","_c","$RefreshReg$"],"sources":["C:/Users/SOAINT/Desktop/Generador-Contenido-AWS/GENERADOR_AWS_POC/src/components/NewPublication/NewPublication.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport FileUploader from '../FileUploader/FileUploader';\r\nimport ContentTypeSelector from '../ContentTypeSelector/ContentTypeSelector';\r\nimport TechnicalFields from '../TechnicalFields/TechnicalFields';\r\nimport GeneratedContent from '../GeneratedContent/GeneratedContent';\r\nimport { Typography, Button, Paper, CircularProgress, Snackbar, Alert, Box } from '@mui/material';\r\n\r\n// Configuración de endpoints\r\nconst WEBSCRAPING_API_ENDPOINT = 'https://6z7btlmzah.execute-api.us-east-2.amazonaws.com/api-aws/scrape';\r\nconst OCR_API_ENDPOINT = 'https://fq5ksi9kw8.execute-api.us-east-2.amazonaws.com/OCR/process';\r\n\r\nconst NewPublication = () => {\r\n    const [archivo, setArchivo] = useState(null);\r\n    const [urls, setUrls] = useState([]);\r\n    const [tipoContenido, setTipoContenido] = useState('PUBLICACION');\r\n    const [resolucion, setResolucion] = useState('');\r\n    const [formato, setFormato] = useState('');\r\n    const [aspectRatio, setAspectRatio] = useState('');\r\n    const [showGeneratedContent, setShowGeneratedContent] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [generatedData, setGeneratedData] = useState(null);\r\n    const [debug, setDebug] = useState(true);\r\n\r\n    const handleFileChange = (file) => {\r\n        console.log(\"Archivo seleccionado:\", file);\r\n        setArchivo(file);\r\n    };\r\n\r\n    const handleUrlChange = (urlsList) => {\r\n        console.log(\"URLs cambiadas:\", urlsList);\r\n        setUrls(urlsList);\r\n    };\r\n\r\n    const handleContentTypeSelect = (tipo) => {\r\n        console.log(\"Tipo de contenido seleccionado:\", tipo);\r\n        setTipoContenido(tipo);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log(\"Iniciando generación de contenido...\");\r\n\r\n        // Validar que se haya ingresado al menos un archivo o una URL\r\n        if (!archivo && urls.length === 0) {\r\n            const errorMsg = 'Por favor, proporciona un archivo o al menos una URL.';\r\n            console.error(errorMsg);\r\n            setError(errorMsg);\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            let processedData;\r\n\r\n            // Determinar qué API llamar basado en si tenemos un archivo o URLs\r\n            if (urls.length > 0) {\r\n                // ===== PROCESAMIENTO WEB SCRAPING =====\r\n                console.log('Procesando URLs mediante Web Scraping:', urls);\r\n\r\n                // Crear objeto de datos para enviar\r\n                const scrapingRequestData = {\r\n                    urls: urls\r\n                };\r\n\r\n                console.log(\"Enviando request a:\", WEBSCRAPING_API_ENDPOINT);\r\n\r\n                const response = await fetch(WEBSCRAPING_API_ENDPOINT, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(scrapingRequestData)\r\n                });\r\n\r\n                console.log(\"Respuesta recibida - Status:\", response.status);\r\n\r\n                const responseText = await response.text();\r\n\r\n                try {\r\n                    // Primer parsing para obtener la respuesta principal\r\n                    const initialData = JSON.parse(responseText);\r\n                    console.log(\"Respuesta inicial parseada - statusCode:\", initialData.statusCode);\r\n\r\n                    // La respuesta tiene una estructura donde el contenido real está en \"body\" como string\r\n                    if (initialData.statusCode === 200 && initialData.body) {\r\n                        // Segundo parsing para obtener el contenido real del body\r\n                        const bodyData = JSON.parse(initialData.body);\r\n                        console.log(\"Datos del body parseados - message:\", bodyData.message);\r\n\r\n                        // Extraer y procesar los resultados del scraping\r\n                        if (bodyData.results && Array.isArray(bodyData.results)) {\r\n                            // Transformar los datos para GeneratedContent\r\n                            processedData = {\r\n                                success: true,\r\n                                contentType: tipoContenido,\r\n                                scraped_content: bodyData.results,\r\n                                technicalProperties: {\r\n                                    resolution: resolucion,\r\n                                    format: formato,\r\n                                    aspectRatio: aspectRatio\r\n                                },\r\n                                stats: bodyData.stats\r\n                            };\r\n\r\n                            console.log(\"Datos procesados de Web Scraping listos\");\r\n                        } else {\r\n                            throw new Error(\"No se encontraron resultados de scraping\");\r\n                        }\r\n                    } else {\r\n                        throw new Error(`Error en la respuesta: ${initialData.statusCode}`);\r\n                    }\r\n                } catch (jsonError) {\r\n                    console.error(\"Error al parsear JSON:\", jsonError);\r\n                    throw new Error(`Error al procesar la respuesta: ${responseText.substring(0, 100)}...`);\r\n                }\r\n            }\r\n            else if (archivo) {\r\n                // ===== PROCESAMIENTO OCR =====\r\n                console.log('Procesando archivo mediante OCR:', archivo);\r\n\r\n                // Crear un objeto FormData para enviar el archivo\r\n                const formData = new FormData();\r\n                formData.append('file', archivo);\r\n                formData.append('filename', archivo.name);\r\n\r\n                console.log(\"Enviando archivo a OCR API:\", OCR_API_ENDPOINT);\r\n\r\n                try {\r\n                    const response = await fetch(OCR_API_ENDPOINT, {\r\n                        method: 'POST',\r\n                        body: formData,\r\n                        // No incluir Content-Type en los headers, el navegador lo establecerá automáticamente\r\n                        // con el boundary correcto para multipart/form-data\r\n                    });\r\n\r\n                    console.log(\"Respuesta OCR recibida - Status:\", response.status);\r\n\r\n                    if (!response.ok) {\r\n                        throw new Error(`Error en la llamada a OCR API: ${response.status}`);\r\n                    }\r\n\r\n                    const ocrData = await response.json();\r\n                    console.log(\"Datos OCR recibidos:\", ocrData);\r\n\r\n                    // Transformar los datos para GeneratedContent\r\n                    processedData = {\r\n                        success: true,\r\n                        contentType: tipoContenido,\r\n                        extracted_text: ocrData.text || ocrData.extracted_text || \"No se pudo extraer texto del documento.\",\r\n                        source_file: archivo.name,\r\n                        technicalProperties: {\r\n                            resolution: resolucion,\r\n                            format: formato,\r\n                            aspectRatio: aspectRatio\r\n                        }\r\n                    };\r\n\r\n                    console.log(\"Datos procesados de OCR listos\");\r\n                } catch (ocrError) {\r\n                    console.error(\"Error al procesar OCR:\", ocrError);\r\n                    throw new Error(`Error al procesar OCR: ${ocrError.message}`);\r\n                }\r\n            }\r\n\r\n            console.log(\"Estableciendo datos generados\");\r\n            setGeneratedData(processedData);\r\n\r\n            console.log(\"Cambiando estado para mostrar contenido generado\");\r\n            setShowGeneratedContent(true);\r\n        } catch (error) {\r\n            console.error('Error al generar contenido:', error);\r\n            setError(error.message || 'Ocurrió un error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleBack = () => {\r\n        console.log(\"Volviendo a la pantalla de formulario\");\r\n        setShowGeneratedContent(false);\r\n    };\r\n\r\n    console.log(\"Renderizando NewPublication - showGeneratedContent:\", showGeneratedContent);\r\n    console.log(\"Renderizando NewPublication - generatedData:\", !!generatedData);\r\n\r\n    // Panel de depuración para monitorear el estado\r\n    const DebugPanel = () => (\r\n        <Box\r\n            sx={{\r\n                position: 'fixed',\r\n                bottom: '10px',\r\n                right: '10px',\r\n                zIndex: 9999,\r\n                bgcolor: 'rgba(0,0,0,0.8)',\r\n                color: 'white',\r\n                p: 2,\r\n                borderRadius: 1,\r\n                maxWidth: '300px',\r\n                fontSize: '0.75rem'\r\n            }}\r\n        >\r\n            <Typography variant=\"subtitle2\" sx={{ mb: 1 }}>Estado de la Aplicación</Typography>\r\n            <Box component=\"pre\" sx={{ m: 0, fontSize: '0.7rem' }}>\r\n                {`URLs: ${urls.length}\r\nArchivo: ${archivo ? archivo.name : 'No'}\r\nTipo: ${tipoContenido}\r\nMostrar generado: ${showGeneratedContent}\r\nCargando: ${isLoading}\r\nDatos generados: ${!!generatedData}`}\r\n            </Box>\r\n        </Box>\r\n    );\r\n\r\n    if (showGeneratedContent) {\r\n        console.log(\"Renderizando componente GeneratedContent con datos:\", generatedData);\r\n        return (\r\n            <>\r\n                {debug && <DebugPanel />}\r\n                <GeneratedContent data={generatedData} onBack={handleBack} />\r\n            </>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {debug && <DebugPanel />}\r\n            <Paper elevation={3} sx={{ padding: '2rem', margin: '2rem', width: '100%', backgroundColor: '#ffffff' }}>\r\n                <Typography variant=\"h4\" gutterBottom>\r\n                    Nueva publicación\r\n                </Typography>\r\n\r\n                <FileUploader\r\n                    onFileChange={handleFileChange}\r\n                    onUrlChange={handleUrlChange}\r\n                />\r\n\r\n                <ContentTypeSelector onContentTypeSelect={handleContentTypeSelect} />\r\n\r\n                <TechnicalFields\r\n                    resolucion={resolucion}\r\n                    formato={formato}\r\n                    aspectRatio={aspectRatio}\r\n                    onResolucionChange={(e) => setResolucion(e.target.value)}\r\n                    onFormatoChange={(e) => setFormato(e.target.value)}\r\n                    onAspectRatioChange={(e) => setAspectRatio(e.target.value)}\r\n                />\r\n\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{\r\n                        backgroundColor: '#ff9800',\r\n                        color: '#fff',\r\n                        '&:hover': { backgroundColor: '#e65100' }\r\n                    }}\r\n                    onClick={handleSubmit}\r\n                    disabled={isLoading}\r\n                >\r\n                    {isLoading ? <CircularProgress size={24} color=\"inherit\" /> : 'Generar contenido'}\r\n                </Button>\r\n\r\n                <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError(null)}>\r\n                    <Alert onClose={() => setError(null)} severity=\"error\" sx={{ width: '100%' }}>\r\n                        {error}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Paper>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default NewPublication;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}