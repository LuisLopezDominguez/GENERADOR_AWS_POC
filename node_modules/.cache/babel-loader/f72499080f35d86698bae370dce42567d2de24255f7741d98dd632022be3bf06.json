{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SOAINT\\\\Desktop\\\\Generador-Contenido-AWS\\\\GENERADOR_AWS_POC\\\\src\\\\components\\\\NewPublication\\\\NewPublication.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUploader from '../FileUploader/FileUploader';\nimport ContentTypeSelector from '../ContentTypeSelector/ContentTypeSelector';\nimport TechnicalFields from '../TechnicalFields/TechnicalFields';\nimport GeneratedContent from '../GeneratedContent/GeneratedContent';\nimport { Typography, Button, Paper, CircularProgress, Snackbar, Alert } from '@mui/material';\n\n// Configuración de endpoints\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WEBSCRAPING_API_ENDPOINT = 'https://6z7btlmzah.execute-api.us-east-2.amazonaws.com/api-aws/scrape';\nconst OCR_API_ENDPOINT = 'https://fq5ksi9kw8.execute-api.us-east-2.amazonaws.com/OCR/process';\nconst NewPublication = () => {\n  _s();\n  const [archivo, setArchivo] = useState(null);\n  const [urls, setUrls] = useState([]);\n  const [tipoContenido, setTipoContenido] = useState('PUBLICACION');\n  const [resolucion, setResolucion] = useState('');\n  const [formato, setFormato] = useState('');\n  const [aspectRatio, setAspectRatio] = useState('');\n  const [showGeneratedContent, setShowGeneratedContent] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [generatedData, setGeneratedData] = useState(null);\n  const handleFileChange = file => {\n    console.log(\"Archivo seleccionado:\", file);\n    setArchivo(file);\n  };\n  const handleUrlChange = urlsList => {\n    console.log(\"URLs cambiadas:\", urlsList);\n    setUrls(urlsList);\n  };\n  const handleContentTypeSelect = tipo => {\n    console.log(\"Tipo de contenido seleccionado:\", tipo);\n    setTipoContenido(tipo);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    console.log(\"Iniciando generación de contenido...\");\n\n    // Validar que se haya ingresado al menos un archivo o una URL\n    if (!archivo && urls.length === 0) {\n      const errorMsg = 'Por favor, proporciona un archivo o al menos una URL.';\n      console.error(errorMsg);\n      setError(errorMsg);\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      let processedData;\n\n      // Determinar qué API llamar basado en si tenemos un archivo o URLs\n      if (urls.length > 0) {\n        // ===== PROCESAMIENTO WEB SCRAPING =====\n        console.log('Procesando URLs mediante Web Scraping:', urls);\n\n        // Crear objeto de datos para enviar\n        const scrapingRequestData = {\n          urls: urls\n        };\n        const response = await fetch(WEBSCRAPING_API_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(scrapingRequestData)\n        });\n        if (!response.ok) {\n          throw new Error(`Error en la llamada a Web Scraping API: ${response.status}`);\n        }\n        const responseText = await response.text();\n\n        // Primer parsing para obtener la respuesta principal\n        const initialData = JSON.parse(responseText);\n\n        // La respuesta tiene una estructura donde el contenido real está en \"body\" como string\n        if (initialData.statusCode === 200 && initialData.body) {\n          // Segundo parsing para obtener el contenido real del body\n          const bodyData = JSON.parse(initialData.body);\n\n          // Extraer y procesar los resultados del scraping\n          if (bodyData.results && Array.isArray(bodyData.results)) {\n            // Transformar los datos para GeneratedContent\n            processedData = {\n              success: true,\n              contentType: tipoContenido,\n              scraped_content: bodyData.results,\n              technicalProperties: {\n                resolution: resolucion,\n                format: formato,\n                aspectRatio: aspectRatio\n              },\n              stats: bodyData.stats\n            };\n          } else {\n            throw new Error(\"No se encontraron resultados de scraping\");\n          }\n        } else {\n          throw new Error(`Error en la respuesta: ${initialData.statusCode}`);\n        }\n      } else if (archivo) {\n        // ===== PROCESAMIENTO OCR =====\n        console.log('Procesando archivo mediante OCR:', archivo);\n\n        // Crear un objeto FormData para enviar el archivo\n        const formData = new FormData();\n        formData.append('file', archivo);\n        formData.append('filename', archivo.name);\n\n        // Enviar la solicitud a la API de OCR\n        const response = await fetch(OCR_API_ENDPOINT, {\n          method: 'POST',\n          body: formData,\n          headers: {\n            // No incluir Content-Type para multipart/form-data\n            'Accept': 'application/json'\n          }\n        });\n        if (!response.ok) {\n          throw new Error(`Error en la llamada a OCR API: ${response.status}`);\n        }\n\n        // Obtener los datos de la respuesta\n        const ocrData = await response.json();\n\n        // Procesar el texto extraído según la estructura de respuesta\n        const extractedText = ocrData.text_extraction || ocrData.combined || ocrData.text || \"\";\n\n        // Crear los datos procesados para GeneratedContent\n        processedData = {\n          success: true,\n          contentType: tipoContenido,\n          extracted_text: extractedText,\n          source_file: ocrData.file_name || archivo.name,\n          technicalProperties: {\n            resolution: resolucion,\n            format: formato,\n            aspectRatio: aspectRatio\n          },\n          originalResponse: ocrData\n        };\n      }\n\n      // Establecer los datos generados y mostrar el componente de contenido\n      setGeneratedData(processedData);\n      setShowGeneratedContent(true);\n    } catch (error) {\n      console.error('Error al generar contenido:', error);\n      setError(error.message || 'Ocurrió un error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleBack = () => {\n    setShowGeneratedContent(false);\n  };\n  if (showGeneratedContent) {\n    return /*#__PURE__*/_jsxDEV(GeneratedContent, {\n      data: generatedData,\n      onBack: handleBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      padding: '2rem',\n      margin: '2rem',\n      width: '100%',\n      backgroundColor: '#ffffff'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Nueva publicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n      onFileChange: handleFileChange,\n      onUrlChange: handleUrlChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContentTypeSelector, {\n      onContentTypeSelect: handleContentTypeSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TechnicalFields, {\n      resolucion: resolucion,\n      formato: formato,\n      aspectRatio: aspectRatio,\n      onResolucionChange: e => setResolucion(e.target.value),\n      onFormatoChange: e => setFormato(e.target.value),\n      onAspectRatioChange: e => setAspectRatio(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      sx: {\n        backgroundColor: '#ff9800',\n        color: '#fff',\n        '&:hover': {\n          backgroundColor: '#e65100'\n        }\n      },\n      onClick: handleSubmit,\n      disabled: isLoading,\n      children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 24,\n        color: \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 30\n      }, this) : 'Generar contenido'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!error,\n      autoHideDuration: 6000,\n      onClose: () => setError(null),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setError(null),\n        severity: \"error\",\n        sx: {\n          width: '100%'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 9\n  }, this);\n};\n_s(NewPublication, \"ySitA5RA0nYxwkbeLxx700mM99I=\");\n_c = NewPublication;\nexport default NewPublication;\nvar _c;\n$RefreshReg$(_c, \"NewPublication\");","map":{"version":3,"names":["React","useState","FileUploader","ContentTypeSelector","TechnicalFields","GeneratedContent","Typography","Button","Paper","CircularProgress","Snackbar","Alert","jsxDEV","_jsxDEV","WEBSCRAPING_API_ENDPOINT","OCR_API_ENDPOINT","NewPublication","_s","archivo","setArchivo","urls","setUrls","tipoContenido","setTipoContenido","resolucion","setResolucion","formato","setFormato","aspectRatio","setAspectRatio","showGeneratedContent","setShowGeneratedContent","isLoading","setIsLoading","error","setError","generatedData","setGeneratedData","handleFileChange","file","console","log","handleUrlChange","urlsList","handleContentTypeSelect","tipo","handleSubmit","event","preventDefault","length","errorMsg","processedData","scrapingRequestData","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","responseText","text","initialData","parse","statusCode","bodyData","results","Array","isArray","success","contentType","scraped_content","technicalProperties","resolution","format","stats","formData","FormData","append","name","ocrData","json","extractedText","text_extraction","combined","extracted_text","source_file","file_name","originalResponse","message","handleBack","data","onBack","fileName","_jsxFileName","lineNumber","columnNumber","elevation","sx","padding","margin","width","backgroundColor","children","variant","gutterBottom","onFileChange","onUrlChange","onContentTypeSelect","onResolucionChange","e","target","value","onFormatoChange","onAspectRatioChange","color","onClick","disabled","size","open","autoHideDuration","onClose","severity","_c","$RefreshReg$"],"sources":["C:/Users/SOAINT/Desktop/Generador-Contenido-AWS/GENERADOR_AWS_POC/src/components/NewPublication/NewPublication.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport FileUploader from '../FileUploader/FileUploader';\r\nimport ContentTypeSelector from '../ContentTypeSelector/ContentTypeSelector';\r\nimport TechnicalFields from '../TechnicalFields/TechnicalFields';\r\nimport GeneratedContent from '../GeneratedContent/GeneratedContent';\r\nimport { Typography, Button, Paper, CircularProgress, Snackbar, Alert } from '@mui/material';\r\n\r\n// Configuración de endpoints\r\nconst WEBSCRAPING_API_ENDPOINT = 'https://6z7btlmzah.execute-api.us-east-2.amazonaws.com/api-aws/scrape';\r\nconst OCR_API_ENDPOINT = 'https://fq5ksi9kw8.execute-api.us-east-2.amazonaws.com/OCR/process';\r\n\r\nconst NewPublication = () => {\r\n    const [archivo, setArchivo] = useState(null);\r\n    const [urls, setUrls] = useState([]);\r\n    const [tipoContenido, setTipoContenido] = useState('PUBLICACION');\r\n    const [resolucion, setResolucion] = useState('');\r\n    const [formato, setFormato] = useState('');\r\n    const [aspectRatio, setAspectRatio] = useState('');\r\n    const [showGeneratedContent, setShowGeneratedContent] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [generatedData, setGeneratedData] = useState(null);\r\n\r\n    const handleFileChange = (file) => {\r\n        console.log(\"Archivo seleccionado:\", file);\r\n        setArchivo(file);\r\n    };\r\n\r\n    const handleUrlChange = (urlsList) => {\r\n        console.log(\"URLs cambiadas:\", urlsList);\r\n        setUrls(urlsList);\r\n    };\r\n\r\n    const handleContentTypeSelect = (tipo) => {\r\n        console.log(\"Tipo de contenido seleccionado:\", tipo);\r\n        setTipoContenido(tipo);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        console.log(\"Iniciando generación de contenido...\");\r\n\r\n        // Validar que se haya ingresado al menos un archivo o una URL\r\n        if (!archivo && urls.length === 0) {\r\n            const errorMsg = 'Por favor, proporciona un archivo o al menos una URL.';\r\n            console.error(errorMsg);\r\n            setError(errorMsg);\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            let processedData;\r\n\r\n            // Determinar qué API llamar basado en si tenemos un archivo o URLs\r\n            if (urls.length > 0) {\r\n                // ===== PROCESAMIENTO WEB SCRAPING =====\r\n                console.log('Procesando URLs mediante Web Scraping:', urls);\r\n\r\n                // Crear objeto de datos para enviar\r\n                const scrapingRequestData = {\r\n                    urls: urls\r\n                };\r\n\r\n                const response = await fetch(WEBSCRAPING_API_ENDPOINT, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(scrapingRequestData)\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Error en la llamada a Web Scraping API: ${response.status}`);\r\n                }\r\n\r\n                const responseText = await response.text();\r\n\r\n                // Primer parsing para obtener la respuesta principal\r\n                const initialData = JSON.parse(responseText);\r\n\r\n                // La respuesta tiene una estructura donde el contenido real está en \"body\" como string\r\n                if (initialData.statusCode === 200 && initialData.body) {\r\n                    // Segundo parsing para obtener el contenido real del body\r\n                    const bodyData = JSON.parse(initialData.body);\r\n\r\n                    // Extraer y procesar los resultados del scraping\r\n                    if (bodyData.results && Array.isArray(bodyData.results)) {\r\n                        // Transformar los datos para GeneratedContent\r\n                        processedData = {\r\n                            success: true,\r\n                            contentType: tipoContenido,\r\n                            scraped_content: bodyData.results,\r\n                            technicalProperties: {\r\n                                resolution: resolucion,\r\n                                format: formato,\r\n                                aspectRatio: aspectRatio\r\n                            },\r\n                            stats: bodyData.stats\r\n                        };\r\n                    } else {\r\n                        throw new Error(\"No se encontraron resultados de scraping\");\r\n                    }\r\n                } else {\r\n                    throw new Error(`Error en la respuesta: ${initialData.statusCode}`);\r\n                }\r\n            }\r\n            else if (archivo) {\r\n                // ===== PROCESAMIENTO OCR =====\r\n                console.log('Procesando archivo mediante OCR:', archivo);\r\n\r\n                // Crear un objeto FormData para enviar el archivo\r\n                const formData = new FormData();\r\n                formData.append('file', archivo);\r\n                formData.append('filename', archivo.name);\r\n\r\n                // Enviar la solicitud a la API de OCR\r\n                const response = await fetch(OCR_API_ENDPOINT, {\r\n                    method: 'POST',\r\n                    body: formData,\r\n                    headers: {\r\n                        // No incluir Content-Type para multipart/form-data\r\n                        'Accept': 'application/json'\r\n                    }\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`Error en la llamada a OCR API: ${response.status}`);\r\n                }\r\n\r\n                // Obtener los datos de la respuesta\r\n                const ocrData = await response.json();\r\n\r\n                // Procesar el texto extraído según la estructura de respuesta\r\n                const extractedText = ocrData.text_extraction || ocrData.combined || ocrData.text || \"\";\r\n\r\n                // Crear los datos procesados para GeneratedContent\r\n                processedData = {\r\n                    success: true,\r\n                    contentType: tipoContenido,\r\n                    extracted_text: extractedText,\r\n                    source_file: ocrData.file_name || archivo.name,\r\n                    technicalProperties: {\r\n                        resolution: resolucion,\r\n                        format: formato,\r\n                        aspectRatio: aspectRatio\r\n                    },\r\n                    originalResponse: ocrData\r\n                };\r\n            }\r\n\r\n            // Establecer los datos generados y mostrar el componente de contenido\r\n            setGeneratedData(processedData);\r\n            setShowGeneratedContent(true);\r\n\r\n        } catch (error) {\r\n            console.error('Error al generar contenido:', error);\r\n            setError(error.message || 'Ocurrió un error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setShowGeneratedContent(false);\r\n    };\r\n\r\n    if (showGeneratedContent) {\r\n        return <GeneratedContent data={generatedData} onBack={handleBack} />;\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} sx={{ padding: '2rem', margin: '2rem', width: '100%', backgroundColor: '#ffffff' }}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Nueva publicación\r\n            </Typography>\r\n\r\n            <FileUploader\r\n                onFileChange={handleFileChange}\r\n                onUrlChange={handleUrlChange}\r\n            />\r\n\r\n            <ContentTypeSelector onContentTypeSelect={handleContentTypeSelect} />\r\n\r\n            <TechnicalFields\r\n                resolucion={resolucion}\r\n                formato={formato}\r\n                aspectRatio={aspectRatio}\r\n                onResolucionChange={(e) => setResolucion(e.target.value)}\r\n                onFormatoChange={(e) => setFormato(e.target.value)}\r\n                onAspectRatioChange={(e) => setAspectRatio(e.target.value)}\r\n            />\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                sx={{\r\n                    backgroundColor: '#ff9800',\r\n                    color: '#fff',\r\n                    '&:hover': { backgroundColor: '#e65100' }\r\n                }}\r\n                onClick={handleSubmit}\r\n                disabled={isLoading}\r\n            >\r\n                {isLoading ? <CircularProgress size={24} color=\"inherit\" /> : 'Generar contenido'}\r\n            </Button>\r\n\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError(null)}>\r\n                <Alert onClose={() => setError(null)} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default NewPublication;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}