{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SOAINT\\\\Desktop\\\\Generador-Contenido-AWS\\\\GENERADOR_AWS_POC\\\\src\\\\components\\\\NewPublication\\\\NewPublication.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileUploader from '../FileUploader/FileUploader';\nimport ContentTypeSelector from '../ContentTypeSelector/ContentTypeSelector';\nimport TechnicalFields from '../TechnicalFields/TechnicalFields';\nimport GeneratedContent from '../GeneratedContent/GeneratedContent';\nimport { Typography, Button, Paper, CircularProgress, Snackbar, Alert } from '@mui/material';\n\n// Configuración de endpoint real para web scraping\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WEBSCRAPING_API_ENDPOINT = 'https://6z7btlmzah.execute-api.us-east-2.amazonaws.com/api-aws/scrape';\n// Endpoint para OCR (aún por definir)\nconst OCR_API_ENDPOINT = 'https://pendiente-endpoint-ocr.amazonaws.com';\nconst NewPublication = () => {\n  _s();\n  const [archivo, setArchivo] = useState(null);\n  const [urls, setUrls] = useState([]);\n  const [tipoContenido, setTipoContenido] = useState('PUBLICACION');\n  const [resolucion, setResolucion] = useState('');\n  const [formato, setFormato] = useState('');\n  const [aspectRatio, setAspectRatio] = useState('');\n  const [showGeneratedContent, setShowGeneratedContent] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [generatedData, setGeneratedData] = useState(null);\n  const handleFileChange = file => {\n    setArchivo(file);\n  };\n  const handleUrlChange = urlsList => {\n    setUrls(urlsList);\n  };\n  const handleContentTypeSelect = tipo => {\n    setTipoContenido(tipo);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // Validar que se haya ingresado al menos un archivo o una URL\n    if (!archivo && urls.length === 0) {\n      setError('Por favor, proporciona un archivo o al menos una URL.');\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    try {\n      let responseData;\n\n      // Determinar qué API llamar basado en si tenemos un archivo o URLs\n      if (urls.length > 0) {\n        // Caso URL - Llamar a la API de Web Scraping\n        console.log('Procesando URLs mediante Web Scraping:', urls);\n\n        // Crear objeto de datos para enviar\n        const scrapingRequestData = {\n          urls: urls\n        };\n        const response = await fetch(WEBSCRAPING_API_ENDPOINT, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(scrapingRequestData)\n        });\n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || 'Error en la llamada al API de Web Scraping');\n        }\n        responseData = await response.json();\n        console.log('Respuesta de Web Scraping:', responseData);\n\n        // Añadir metadata adicional para el procesamiento\n        responseData = {\n          ...responseData,\n          contentType: tipoContenido,\n          technicalProperties: {\n            resolution: resolucion,\n            format: formato,\n            aspectRatio: aspectRatio\n          }\n        };\n      } else if (archivo) {\n        // Caso archivo - Simulación temporal mientras implementamos OCR\n        console.log('Procesando archivo mediante OCR (simulado por ahora):', archivo);\n\n        // En una implementación real, aquí convertiríamos el archivo a base64\n        // y llamaríamos a la API de OCR\n\n        // Simulación de respuesta para pruebas\n        setTimeout(() => {\n          responseData = {\n            success: true,\n            extracted_text: `Texto extraído del documento \"${archivo.name}\" mediante OCR (simulado).\\n\\nEste es un contenido de ejemplo para mostrar cómo se vería la extracción de texto desde un documento. En una implementación real, este texto vendría de la API de OCR utilizando servicios como AWS Textract.`,\n            contentType: tipoContenido,\n            technicalProperties: {\n              resolution: resolucion,\n              format: formato,\n              aspectRatio: aspectRatio\n            }\n          };\n          setGeneratedData(responseData);\n          setShowGeneratedContent(true);\n          setIsLoading(false);\n        }, 2000);\n        return; // Salir temprano para la simulación\n      }\n      setGeneratedData(responseData);\n      setShowGeneratedContent(true);\n    } catch (error) {\n      console.error('Error al generar contenido:', error);\n      setError(error.message || 'Ocurrió un error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleBack = () => {\n    setShowGeneratedContent(false);\n    // Opcionalmente, podríamos resetear los datos generados\n    // setGeneratedData(null);\n  };\n  if (showGeneratedContent) {\n    return /*#__PURE__*/_jsxDEV(GeneratedContent, {\n      data: generatedData,\n      onBack: handleBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    elevation: 3,\n    sx: {\n      padding: '2rem',\n      margin: '2rem',\n      width: '100%',\n      backgroundColor: '#ffffff'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"Nueva publicaci\\xF3n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FileUploader, {\n      onFileChange: handleFileChange,\n      onUrlChange: handleUrlChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ContentTypeSelector, {\n      onContentTypeSelect: handleContentTypeSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(TechnicalFields, {\n      resolucion: resolucion,\n      formato: formato,\n      aspectRatio: aspectRatio,\n      onResolucionChange: e => setResolucion(e.target.value),\n      onFormatoChange: e => setFormato(e.target.value),\n      onAspectRatioChange: e => setAspectRatio(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      sx: {\n        backgroundColor: '#ff9800',\n        color: '#fff',\n        '&:hover': {\n          backgroundColor: '#e65100'\n        }\n      },\n      onClick: handleSubmit,\n      disabled: isLoading,\n      children: isLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 24,\n        color: \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 30\n      }, this) : 'Generar contenido'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!error,\n      autoHideDuration: 6000,\n      onClose: () => setError(null),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setError(null),\n        severity: \"error\",\n        sx: {\n          width: '100%'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 9\n  }, this);\n};\n_s(NewPublication, \"ySitA5RA0nYxwkbeLxx700mM99I=\");\n_c = NewPublication;\nexport default NewPublication;\nvar _c;\n$RefreshReg$(_c, \"NewPublication\");","map":{"version":3,"names":["React","useState","FileUploader","ContentTypeSelector","TechnicalFields","GeneratedContent","Typography","Button","Paper","CircularProgress","Snackbar","Alert","jsxDEV","_jsxDEV","WEBSCRAPING_API_ENDPOINT","OCR_API_ENDPOINT","NewPublication","_s","archivo","setArchivo","urls","setUrls","tipoContenido","setTipoContenido","resolucion","setResolucion","formato","setFormato","aspectRatio","setAspectRatio","showGeneratedContent","setShowGeneratedContent","isLoading","setIsLoading","error","setError","generatedData","setGeneratedData","handleFileChange","file","handleUrlChange","urlsList","handleContentTypeSelect","tipo","handleSubmit","event","preventDefault","length","responseData","console","log","scrapingRequestData","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","contentType","technicalProperties","resolution","format","setTimeout","success","extracted_text","name","handleBack","data","onBack","fileName","_jsxFileName","lineNumber","columnNumber","elevation","sx","padding","margin","width","backgroundColor","children","variant","gutterBottom","onFileChange","onUrlChange","onContentTypeSelect","onResolucionChange","e","target","value","onFormatoChange","onAspectRatioChange","color","onClick","disabled","size","open","autoHideDuration","onClose","severity","_c","$RefreshReg$"],"sources":["C:/Users/SOAINT/Desktop/Generador-Contenido-AWS/GENERADOR_AWS_POC/src/components/NewPublication/NewPublication.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport FileUploader from '../FileUploader/FileUploader';\r\nimport ContentTypeSelector from '../ContentTypeSelector/ContentTypeSelector';\r\nimport TechnicalFields from '../TechnicalFields/TechnicalFields';\r\nimport GeneratedContent from '../GeneratedContent/GeneratedContent';\r\nimport { Typography, Button, Paper, CircularProgress, Snackbar, Alert } from '@mui/material';\r\n\r\n// Configuración de endpoint real para web scraping\r\nconst WEBSCRAPING_API_ENDPOINT = 'https://6z7btlmzah.execute-api.us-east-2.amazonaws.com/api-aws/scrape';\r\n// Endpoint para OCR (aún por definir)\r\nconst OCR_API_ENDPOINT = 'https://pendiente-endpoint-ocr.amazonaws.com';\r\n\r\nconst NewPublication = () => {\r\n    const [archivo, setArchivo] = useState(null);\r\n    const [urls, setUrls] = useState([]);\r\n    const [tipoContenido, setTipoContenido] = useState('PUBLICACION');\r\n    const [resolucion, setResolucion] = useState('');\r\n    const [formato, setFormato] = useState('');\r\n    const [aspectRatio, setAspectRatio] = useState('');\r\n    const [showGeneratedContent, setShowGeneratedContent] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [generatedData, setGeneratedData] = useState(null);\r\n\r\n    const handleFileChange = (file) => {\r\n        setArchivo(file);\r\n    };\r\n\r\n    const handleUrlChange = (urlsList) => {\r\n        setUrls(urlsList);\r\n    };\r\n\r\n    const handleContentTypeSelect = (tipo) => {\r\n        setTipoContenido(tipo);\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        // Validar que se haya ingresado al menos un archivo o una URL\r\n        if (!archivo && urls.length === 0) {\r\n            setError('Por favor, proporciona un archivo o al menos una URL.');\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            let responseData;\r\n\r\n            // Determinar qué API llamar basado en si tenemos un archivo o URLs\r\n            if (urls.length > 0) {\r\n                // Caso URL - Llamar a la API de Web Scraping\r\n                console.log('Procesando URLs mediante Web Scraping:', urls);\r\n\r\n                // Crear objeto de datos para enviar\r\n                const scrapingRequestData = {\r\n                    urls: urls\r\n                };\r\n\r\n                const response = await fetch(WEBSCRAPING_API_ENDPOINT, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    body: JSON.stringify(scrapingRequestData)\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    const errorData = await response.json();\r\n                    throw new Error(errorData.message || 'Error en la llamada al API de Web Scraping');\r\n                }\r\n\r\n                responseData = await response.json();\r\n                console.log('Respuesta de Web Scraping:', responseData);\r\n\r\n                // Añadir metadata adicional para el procesamiento\r\n                responseData = {\r\n                    ...responseData,\r\n                    contentType: tipoContenido,\r\n                    technicalProperties: {\r\n                        resolution: resolucion,\r\n                        format: formato,\r\n                        aspectRatio: aspectRatio\r\n                    }\r\n                };\r\n            } else if (archivo) {\r\n                // Caso archivo - Simulación temporal mientras implementamos OCR\r\n                console.log('Procesando archivo mediante OCR (simulado por ahora):', archivo);\r\n\r\n                // En una implementación real, aquí convertiríamos el archivo a base64\r\n                // y llamaríamos a la API de OCR\r\n\r\n                // Simulación de respuesta para pruebas\r\n                setTimeout(() => {\r\n                    responseData = {\r\n                        success: true,\r\n                        extracted_text: `Texto extraído del documento \"${archivo.name}\" mediante OCR (simulado).\\n\\nEste es un contenido de ejemplo para mostrar cómo se vería la extracción de texto desde un documento. En una implementación real, este texto vendría de la API de OCR utilizando servicios como AWS Textract.`,\r\n                        contentType: tipoContenido,\r\n                        technicalProperties: {\r\n                            resolution: resolucion,\r\n                            format: formato,\r\n                            aspectRatio: aspectRatio\r\n                        }\r\n                    };\r\n\r\n                    setGeneratedData(responseData);\r\n                    setShowGeneratedContent(true);\r\n                    setIsLoading(false);\r\n                }, 2000);\r\n\r\n                return; // Salir temprano para la simulación\r\n            }\r\n\r\n            setGeneratedData(responseData);\r\n            setShowGeneratedContent(true);\r\n        } catch (error) {\r\n            console.error('Error al generar contenido:', error);\r\n            setError(error.message || 'Ocurrió un error al procesar la solicitud. Por favor, intenta de nuevo más tarde.');\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setShowGeneratedContent(false);\r\n        // Opcionalmente, podríamos resetear los datos generados\r\n        // setGeneratedData(null);\r\n    };\r\n\r\n    if (showGeneratedContent) {\r\n        return <GeneratedContent data={generatedData} onBack={handleBack} />;\r\n    }\r\n\r\n    return (\r\n        <Paper elevation={3} sx={{ padding: '2rem', margin: '2rem', width: '100%', backgroundColor: '#ffffff' }}>\r\n            <Typography variant=\"h4\" gutterBottom>\r\n                Nueva publicación\r\n            </Typography>\r\n\r\n            <FileUploader\r\n                onFileChange={handleFileChange}\r\n                onUrlChange={handleUrlChange}\r\n            />\r\n\r\n            <ContentTypeSelector onContentTypeSelect={handleContentTypeSelect} />\r\n\r\n            <TechnicalFields\r\n                resolucion={resolucion}\r\n                formato={formato}\r\n                aspectRatio={aspectRatio}\r\n                onResolucionChange={(e) => setResolucion(e.target.value)}\r\n                onFormatoChange={(e) => setFormato(e.target.value)}\r\n                onAspectRatioChange={(e) => setAspectRatio(e.target.value)}\r\n            />\r\n\r\n            <Button\r\n                variant=\"contained\"\r\n                sx={{\r\n                    backgroundColor: '#ff9800',\r\n                    color: '#fff',\r\n                    '&:hover': { backgroundColor: '#e65100' }\r\n                }}\r\n                onClick={handleSubmit}\r\n                disabled={isLoading}\r\n            >\r\n                {isLoading ? <CircularProgress size={24} color=\"inherit\" /> : 'Generar contenido'}\r\n            </Button>\r\n\r\n            <Snackbar open={!!error} autoHideDuration={6000} onClose={() => setError(null)}>\r\n                <Alert onClose={() => setError(null)} severity=\"error\" sx={{ width: '100%' }}>\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default NewPublication;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}